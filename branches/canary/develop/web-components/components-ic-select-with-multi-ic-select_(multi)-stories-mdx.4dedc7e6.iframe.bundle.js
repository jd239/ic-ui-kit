/*! For license information please see components-ic-select-with-multi-ic-select_(multi)-stories-mdx.4dedc7e6.iframe.bundle.js.LICENSE.txt */
(self.webpackChunk_ukic_canary_web_components=self.webpackChunk_ukic_canary_web_components||[]).push([[5442],{"./node_modules/@storybook/addon-docs/dist/index.mjs":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.d(__webpack_exports__,{Xz:()=>_storybook_blocks__WEBPACK_IMPORTED_MODULE_1__.Xz,h_:()=>_storybook_blocks__WEBPACK_IMPORTED_MODULE_1__.h_,oG:()=>_storybook_blocks__WEBPACK_IMPORTED_MODULE_1__.oG});__webpack_require__("./node_modules/@storybook/addon-docs/dist/chunk-HLWAVYOI.mjs");var _storybook_blocks__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/@storybook/blocks/dist/index.mjs")},"./node_modules/@storybook/addon-docs/node_modules/@mdx-js/react/lib/index.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.d(__webpack_exports__,{NF:()=>withMDXComponents,Zo:()=>MDXProvider,ah:()=>useMDXComponents,pC:()=>MDXContext});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/react/index.js");const MDXContext=react__WEBPACK_IMPORTED_MODULE_0__.createContext({});function withMDXComponents(Component){return function boundMDXComponent(props){const allComponents=useMDXComponents(props.components);return react__WEBPACK_IMPORTED_MODULE_0__.createElement(Component,{...props,allComponents})}}function useMDXComponents(components){const contextComponents=react__WEBPACK_IMPORTED_MODULE_0__.useContext(MDXContext);return react__WEBPACK_IMPORTED_MODULE_0__.useMemo((()=>"function"==typeof components?components(contextComponents):{...contextComponents,...components}),[contextComponents,components])}const emptyObject={};function MDXProvider({components,children,disableParentContext}){let allComponents;return allComponents=disableParentContext?"function"==typeof components?components({}):components||emptyObject:useMDXComponents(components),react__WEBPACK_IMPORTED_MODULE_0__.createElement(MDXContext.Provider,{value:allComponents},children)}},"./src/components/ic-select-with-multi/ic-select_(multi).stories.mdx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{__namedExportsOrder:()=>__namedExportsOrder,default:()=>ic_select_multi_stories,defaultArgs:()=>defaultArgs,defaultStory:()=>defaultStory,defaultValue:()=>defaultValue,disabled:()=>disabled,disabledOptions:()=>disabledOptions,groups:()=>groups,helperText:()=>helperText,hiddenLabel:()=>hiddenLabel,inForm:()=>inForm,loadingWithError:()=>loadingWithError,readOnly:()=>readOnly,recommended:()=>recommended,required:()=>required,sizes:()=>sizes,validation:()=>validation,withClearButton:()=>withClearButton,withDescriptions:()=>withDescriptions});__webpack_require__("./node_modules/react/index.js");var lib=__webpack_require__("./node_modules/@storybook/addon-docs/node_modules/@mdx-js/react/lib/index.js"),dist=__webpack_require__("./node_modules/@storybook/addon-docs/dist/index.mjs");__webpack_require__("./node_modules/lit-html/lit-html.js");const OPTIONS=[{label:"Cappuccino",value:"Cap"},{label:"Latte",value:"Lat"},{label:"Americano",value:"Ame"},{label:"Filter",value:"Fil"},{label:"Flat white",value:"Fla"},{label:"Mocha",value:"Moc"},{label:"Macchiato",value:"Mac"}],OPTIONS_WITH_DESCRIPTIONS=[{label:"Cappuccino",value:"Cap",description:"Coffee frothed up with pressurised steam"},{label:"Latte",value:"Lat",description:"A milkier coffee than a cappuccino"},{label:"Americano",value:"Ame",description:"Espresso coffee diluted with hot water"},{label:"Filter",value:"Fil",description:"Coffee filtered using paper or a mesh"},{label:"Flat white",value:"Fla",description:"Coffee without froth made with espresso and hot steamed milk"},{label:"Mocha",value:"Moc",description:"A mixture of coffee and chocolate"},{label:"Macchiato",value:"Mac",description:"Espresso coffee with a dash of frothy steamed milk"}],OPTIONS_WITH_DISABLED=[{label:"Cappuccino",value:"Cap"},{label:"Latte",value:"Lat",disabled:!0},{label:"Americano",value:"Ame"},{label:"Filter",value:"Fil",disabled:!0},{label:"Flat white",value:"Fla",disabled:!0},{label:"Mocha",value:"Moc"},{label:"Macchiato",value:"Mac"}],GROUPED_OPTIONS=[{label:"Fancy",children:[{label:"Cappuccino",value:"Cap"},{label:"Flat white",value:"Flat"}]},{label:"Boring",children:[{label:"Filter",value:"Fil"},{label:"Latte",value:"Lat"}]}],OPTIONS_WITH_RECOMMENDED=[{label:"Cappuccino",value:"Cap"},{label:"Latte",value:"Lat"},{label:"Americano",value:"Ame",recommended:!0},{label:"Filter",value:"Fil"},{label:"Flat white",value:"Fla",recommended:!0},{label:"Mocha",value:"Moc"},{label:"Macchiato",value:"Mac"}],createMultiSelectElement=(options=OPTIONS)=>{const multiSelect=document.createElement("ic-select-with-multi");return multiSelect.setAttribute("multiple","true"),multiSelect.setAttribute("label","What are your favourite types of coffee?"),multiSelect.options=options,multiSelect.addEventListener("icChange",(function(event){console.log("icChange: "+event.detail.value)})),multiSelect},createContainer=(elementArray,height="430px")=>{const container=document.createElement("div");return container.style.height=height,elementArray.forEach((element=>container.appendChild(element))),container},Default=()=>{const multiSelect=createMultiSelectElement();return multiSelect.addEventListener("icOptionSelect",(function(event){console.log("icOptionSelect: "+event.detail.value)})),multiSelect.addEventListener("icOptionDeselect",(function(event){console.log("icOptionDeselect: "+event.detail.value)})),createContainer([multiSelect])},DefaultValue=()=>{const multiSelect=createMultiSelectElement();return multiSelect.value=["Ame","Fil","Moc"],createContainer([multiSelect])},WithClearButton=()=>{const multiSelect=createMultiSelectElement();return multiSelect.setAttribute("show-clear-button","true"),createContainer([multiSelect])},WithDescriptions=()=>{const multiSelect=createMultiSelectElement(OPTIONS_WITH_DESCRIPTIONS);return createContainer([multiSelect],"470px")},HelperText=()=>{const multiSelect=createMultiSelectElement();return multiSelect.setAttribute("helper-text","Select some options from the list"),createContainer([multiSelect],"450px")},Sizes=()=>{const multiSelectSmall=createMultiSelectElement();multiSelectSmall.setAttribute("size","small");const multiSelectDefault=createMultiSelectElement(),multiSelectLarge=createMultiSelectElement();multiSelectLarge.setAttribute("size","large");const container=createContainer([multiSelectSmall,multiSelectDefault,multiSelectLarge],"650px");return container.style.display="flex",container.style.flexDirection="column",container.style.gap="16px",container},Disabled=()=>{const multiSelect=createMultiSelectElement();return multiSelect.setAttribute("disabled","true"),createContainer([multiSelect],"200px")},DisabledOptions=()=>{const multiSelect=createMultiSelectElement(OPTIONS_WITH_DISABLED);return createContainer([multiSelect])},HiddenLabel=()=>{const multiSelect=createMultiSelectElement();return multiSelect.setAttribute("hide-label","true"),createContainer([multiSelect],"400px")},Required=()=>{const multiSelect=createMultiSelectElement();return multiSelect.setAttribute("required","true"),createContainer([multiSelect])},ReadOnly=()=>{const multiSelect=createMultiSelectElement();return multiSelect.value=["Cap","Fla","Moc"],multiSelect.setAttribute("readonly","true"),createContainer([multiSelect],"200px")},Groups=()=>{const multiSelect=createMultiSelectElement(GROUPED_OPTIONS);return createContainer([multiSelect])},Recommended=()=>{const multiSelect=createMultiSelectElement(OPTIONS_WITH_RECOMMENDED);return createContainer([multiSelect])},Validation=()=>{const multiSelectSuccess=createMultiSelectElement();multiSelectSuccess.setAttribute("validation-status","success"),multiSelectSuccess.setAttribute("validation-text","Coffee available");const multiSelectWarning=createMultiSelectElement();multiSelectWarning.setAttribute("validation-status","warning"),multiSelectWarning.setAttribute("validation-text","Only a few left");const multiSelectError=createMultiSelectElement();multiSelectError.setAttribute("validation-status","error"),multiSelectError.setAttribute("validation-text","Coffee unavailable");return createContainer([multiSelectSuccess,multiSelectWarning,multiSelectError],"640px")},LoadingWithError=()=>{const multiSelect=createMultiSelectElement();return multiSelect.setAttribute("loading","true"),multiSelect.setAttribute("timeout","1000"),multiSelect.addEventListener("icRetryLoad",(function(){multiSelect.setAttribute("loading","true")})),createContainer([multiSelect])},InForm=()=>{const form=document.createElement("form"),multiSelect=createMultiSelectElement();form.appendChild(multiSelect),form.appendChild(document.createElement("br")),form.appendChild(document.createElement("br"));const submitButton=document.createElement("input");submitButton.setAttribute("type","submit"),submitButton.setAttribute("value","Submit");const resetButton=document.createElement("input");return resetButton.setAttribute("type","reset"),resetButton.setAttribute("value","Reset"),form.appendChild(submitButton),form.appendChild(resetButton),form.addEventListener("submit",(function(event){event.preventDefault(),console.log(multiSelect.querySelector("input.ic-input").value)})),createContainer([form])},readme_namespaceObject='# ic-select\n\n\n\n\x3c!-- Auto Generated Below --\x3e\n\n\n## Properties\n\n| Property                      | Attribute                        | Description                                                                                                                                                                                                                                                                | Type                                      | Default              |\n| ----------------------------- | -------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ----------------------------------------- | -------------------- |\n| `charactersUntilSuggestions`  | `characters-until-suggestions`   | **[DEPRECATED]** This prop should not be used anymore.                                                                                                                                                                                                                     | `number`                                  | `0`                  |\n| `debounce`                    | `debounce`                       | The amount of time, in milliseconds, to wait to trigger the `icChange` event after each keystroke.                                                                                                                                                                         | `number`                                  | `0`                  |\n| `disableFilter`               | `disable-filter`                 | If `true`, the built in filtering will be disabled for a searchable variant. For example, if options will already be filtered from external source.                                                                                                                        | `boolean`                                 | `false`              |\n| `disabled`                    | `disabled`                       | If `true`, the disabled state will be set.                                                                                                                                                                                                                                 | `boolean`                                 | `false`              |\n| `emptyOptionListText`         | `empty-option-list-text`         | The text displayed when there are no options in the option list.                                                                                                                                                                                                           | `string`                                  | `"No results found"` |\n| `form`                        | `form`                           | The <form> element to associate the select with.                                                                                                                                                                                                                           | `string`                                  | `undefined`          |\n| `formaction`                  | `formaction`                     | The URL that processes the information submitted by the select. It overrides the action attribute of the select\'s form owner. Does nothing if there is no form owner. This prop should only be used with searchable select and will only be applied if searchable is true. | `string`                                  | `undefined`          |\n| `formenctype`                 | `formenctype`                    | The way the submitted form data is encoded. This prop should only be used with searchable select and will only be applied if searchable is true.                                                                                                                           | `string`                                  | `undefined`          |\n| `formmethod`                  | `formmethod`                     | The HTTP method used to submit the form. This prop should only be used with searchable select and will only be applied if searchable is true.                                                                                                                              | `string`                                  | `undefined`          |\n| `formnovalidate`              | `formnovalidate`                 | If `true`, the form will not be validated when submitted. This prop should only be used with searchable select and will only be applied if searchable is true.                                                                                                             | `boolean`                                 | `undefined`          |\n| `formtarget`                  | `formtarget`                     | The place to display the response from submitting the form. It overrides the target attribute of the select\'s form owner. This prop should only be used with searchable select and will only be applied if searchable is true.                                             | `string`                                  | `undefined`          |\n| `fullWidth`                   | `full-width`                     | If `true`, the select element will fill the width of the container. This prop should only be used with searchable select and will only be applied if searchable is true.                                                                                                   | `boolean`                                 | `false`              |\n| `helperText`                  | `helper-text`                    | The helper text that will be displayed for additional field guidance.                                                                                                                                                                                                      | `string`                                  | `""`                 |\n| `hideLabel`                   | `hide-label`                     | If `true`, the label will be hidden and the required label value will be applied as an aria-label.                                                                                                                                                                         | `boolean`                                 | `false`              |\n| `includeDescriptionsInSearch` | `include-descriptions-in-search` | If `true`, descriptions of options will be included when filtering options in a searchable select. Only applies to built in filtering.                                                                                                                                     | `boolean`                                 | `false`              |\n| `includeGroupTitlesInSearch`  | `include-group-titles-in-search` | If `true`, group titles of grouped options will be included when filtering options in a searchable select. Only applies to built in filtering.                                                                                                                             | `boolean`                                 | `false`              |\n| `label` _(required)_          | `label`                          | The label for the select.                                                                                                                                                                                                                                                  | `string`                                  | `undefined`          |\n| `loading`                     | `loading`                        | If `true`, the loading state will be triggered when fetching options asynchronously.                                                                                                                                                                                       | `boolean`                                 | `false`              |\n| `loadingErrorLabel`           | `loading-error-label`            | The message displayed when external loading times out.                                                                                                                                                                                                                     | `string`                                  | `"Loading Error"`    |\n| `loadingLabel`                | `loading-label`                  | The message displayed whilst the options are being loaded externally.                                                                                                                                                                                                      | `string`                                  | `"Loading..."`       |\n| `multiple`                    | `multiple`                       | If `true`, multiple options can be selected.                                                                                                                                                                                                                               | `boolean`                                 | `false`              |\n| `name`                        | `name`                           | The name of the control, which is submitted with the form data.                                                                                                                                                                                                            | `string`                                  | `this.inputId`       |\n| `options`                     | --                               | The possible selection options.                                                                                                                                                                                                                                            | `IcMenuOption[]`                          | `[]`                 |\n| `placeholder`                 | `placeholder`                    | The placeholder value to be displayed.                                                                                                                                                                                                                                     | `string`                                  | `"Select an option"` |\n| `readonly`                    | `readonly`                       | If `true`, the readonly state will be set.                                                                                                                                                                                                                                 | `boolean`                                 | `false`              |\n| `required`                    | `required`                       | If `true`, the select will require a value.                                                                                                                                                                                                                                | `boolean`                                 | `false`              |\n| `searchMatchPosition`         | `search-match-position`          | Whether the search string of the searchable select should match the start of or anywhere in the options. Only applies to built in filtering.                                                                                                                               | `"anywhere" \\| "start"`                   | `"anywhere"`         |\n| `searchable`                  | `searchable`                     | If `true`, a searchable variant of the select will be displayed which can be typed in to filter options.                                                                                                                                                                   | `boolean`                                 | `false`              |\n| `selectOnEnter`               | `select-on-enter`                | If `true`, the icOptionSelect event will be fired on enter instead of ArrowUp and ArrowDown.                                                                                                                                                                               | `boolean`                                 | `false`              |\n| `showClearButton`             | `show-clear-button`              | If `true`, a button which clears the select input when clicked will be displayed. The button will always appear on the searchable select.                                                                                                                                  | `boolean`                                 | `false`              |\n| `size`                        | `size`                           | The size of the select.                                                                                                                                                                                                                                                    | `"default" \\| "large" \\| "small"`         | `"default"`          |\n| `small`                       | `small`                          | **[DEPRECATED]** This prop should not be used anymore. Set prop `size` to "small" instead.                                                                                                                                                                                 | `boolean`                                 | `false`              |\n| `timeout`                     | `timeout`                        | If using external filtering, set a timeout for when loading takes too long.                                                                                                                                                                                                | `number`                                  | `undefined`          |\n| `validationStatus`            | `validation-status`              | The validation status - e.g. \'error\' \\| \'warning\' \\| \'success\'.                                                                                                                                                                                                            | `"" \\| "error" \\| "success" \\| "warning"` | `""`                 |\n| `validationText`              | `validation-text`                | The text to display as the validation message.                                                                                                                                                                                                                             | `string`                                  | `""`                 |\n| `value`                       | `value`                          | The value of the select, reflected by the value of the currently selected option. For the searchable variant, the value is also reflected by the user input. For the multi-select variant, the value must be an array of option values.                                    | `string \\| string[]`                      | `undefined`          |\n\n\n## Events\n\n| Event              | Description                                                                                                                        | Type                                     |\n| ------------------ | ---------------------------------------------------------------------------------------------------------------------------------- | ---------------------------------------- |\n| `icBlur`           | Emitted when the select loses focus.                                                                                               | `CustomEvent<void>`                      |\n| `icChange`         | Emitted when the value changes.                                                                                                    | `CustomEvent<IcValueEventDetail>`        |\n| `icClear`          | Emitted when the clear button is clicked.                                                                                          | `CustomEvent<void>`                      |\n| `icFocus`          | Emitted when the select gains focus.                                                                                               | `CustomEvent<void>`                      |\n| `icInput`          | Emitted when a keyboard input occurred.                                                                                            | `CustomEvent<IcValueEventDetail>`        |\n| `icOptionDeselect` | Emitted when `multiple` is `true` and an option is deselected.                                                                     | `CustomEvent<IcOptionSelectEventDetail>` |\n| `icOptionSelect`   | Emitted when an option is selected. Selecting an option will also trigger an `icChange/onIcChange` due to the value being updated. | `CustomEvent<IcOptionSelectEventDetail>` |\n| `icRetryLoad`      | Emitted when the \'retry loading\' button is clicked for a searchable variant.                                                       | `CustomEvent<IcValueEventDetail>`        |\n\n\n## Methods\n\n### `setFocus() => Promise<void>`\n\nSets focus on the input box.\n\n#### Returns\n\nType: `Promise<void>`\n\n\n\n\n## CSS Custom Properties\n\n| Name                | Description                |\n| ------------------- | -------------------------- |\n| `--ic-z-index-menu` | z-index of select menu     |\n| `--input-width`     | Width of the input field   |\n| `--menu-width`      | Width of the dropdown menu |\n\n\n## Dependencies\n\n### Depends on\n\n- ic-input-container\n- ic-input-label\n- ic-input-component-container\n- ic-typography\n- ic-button\n- [ic-menu-with-multi](../ic-menu-with-multi)\n- ic-input-validation\n\n### Graph\n```mermaid\ngraph TD;\n  ic-select-with-multi --\x3e ic-input-container\n  ic-select-with-multi --\x3e ic-input-label\n  ic-select-with-multi --\x3e ic-input-component-container\n  ic-select-with-multi --\x3e ic-typography\n  ic-select-with-multi --\x3e ic-button\n  ic-select-with-multi --\x3e ic-menu-with-multi\n  ic-select-with-multi --\x3e ic-input-validation\n  ic-input-label --\x3e ic-typography\n  ic-button --\x3e ic-loading-indicator\n  ic-button --\x3e ic-tooltip\n  ic-loading-indicator --\x3e ic-typography\n  ic-tooltip --\x3e ic-typography\n  ic-menu-with-multi --\x3e ic-loading-indicator\n  ic-menu-with-multi --\x3e ic-typography\n  ic-menu-with-multi --\x3e ic-button\n  ic-input-validation --\x3e ic-typography\n  style ic-select-with-multi fill:#f9f,stroke:#333,stroke-width:4px\n```\n\n----------------------------------------------\n\n\n';var jsx_runtime=__webpack_require__("./node_modules/react/jsx-runtime.js");const defaultArgs={disabled:!1,"full-width":!1,"helper-text":"Select some options from the list","hide-label":!1,loading:!1,loadingLabel:"Loading...",label:"What are your favourite types of coffee?",placeholder:"Select an option",readonly:!1,required:!1,size:"default","validation-status":"none","validation-text":"","show-clear-button":!1};function _createMdxContent(props){const _components=Object.assign({h1:"h1",p:"p",ul:"ul",li:"li",code:"code",h3:"h3",h4:"h4",pre:"pre",a:"a"},(0,lib.ah)(),props.components);return(0,jsx_runtime.jsxs)(jsx_runtime.Fragment,{children:[(0,jsx_runtime.jsx)(dist.h_,{title:"Web Components/Multi-Select",component:"ic-select-with-multi",parameters:{componentAPI:{data:readme_namespaceObject}}}),"\n","\n",(0,jsx_runtime.jsx)(_components.h1,{id:"canary-multi-select",children:"[Canary]: Multi-Select"}),"\n",(0,jsx_runtime.jsx)(_components.p,{children:"Use the multi-select component to allow users to select one or more values from a list of options."}),"\n",(0,jsx_runtime.jsx)(_components.p,{children:"There is one required prop for the multi-select:"}),"\n",(0,jsx_runtime.jsxs)(_components.ul,{children:["\n",(0,jsx_runtime.jsxs)(_components.li,{children:["label: ",(0,jsx_runtime.jsx)(_components.code,{children:"string"})]}),"\n"]}),"\n",(0,jsx_runtime.jsx)(_components.p,{children:"Click the 'Component API' tab to view all the available props, events and slots for the multi-select."}),"\n",(0,jsx_runtime.jsxs)(_components.p,{children:["To use the multi-select component, import ",(0,jsx_runtime.jsx)(_components.code,{children:"@ukic/canary-web-components"})," into your application."]}),"\n",(0,jsx_runtime.jsxs)(_components.p,{children:["The component tag name for the multi-select is ",(0,jsx_runtime.jsx)(_components.code,{children:"ic-select-with-multi"}),".\nEven though it is a variant of the ",(0,jsx_runtime.jsx)(_components.code,{children:"ic-select"})," component (which includes the single and searchable selects), this different tag name is necessary because of the need to keep the multi-select functionality separate while it is experimental (in a canary release).\nNote that the ",(0,jsx_runtime.jsx)(_components.code,{children:"multiple"})," prop still needs to be applied in order to enable the multi-select functionality."]}),"\n",(0,jsx_runtime.jsx)(_components.h3,{id:"default",children:"Default"}),"\n",(0,jsx_runtime.jsx)(_components.p,{children:"An example of a default multi-select (with no additional functionality)."}),"\n",(0,jsx_runtime.jsx)(dist.Xz,{withSource:"none",children:(0,jsx_runtime.jsx)(dist.oG,{name:"Default",children:Default()})}),"\n",(0,jsx_runtime.jsx)(_components.h4,{id:"default-code-example",children:"Default code example"}),"\n",(0,jsx_runtime.jsx)(_components.pre,{children:(0,jsx_runtime.jsx)(_components.code,{className:"language-html",children:'<ic-select-with-multi\n  id="select-default"\n  label="What are your favourite types of coffee?"\n  multiple\n></ic-select-with-multi>\n<script>\n  var select = document.querySelector("#select-default");\n  select.options = [\n    { label: "Cappuccino", value: "Cap" },\n    { label: "Latte", value: "Lat" },\n    { label: "Americano", value: "Ame" },\n    { label: "Filter", value: "Fil" },\n    { label: "Flat white", value: "Fla" },\n    { label: "Mocha", value: "Moc" },\n    { label: "Macchiato", value: "Mac" },\n  ];\n  select.addEventListener("icChange", function (event) {\n    console.log("icChange: " + event.detail.value);\n  });\n  select.addEventListener("icOptionSelect", function (event) {\n    console.log("icOptionSelect: " + event.detail.value);\n  });\n  select.addEventListener("icOptionDeselect", function (event) {\n    console.log("icOptionDeselect: " + event.detail.value);\n  });\n<\/script>\n'})}),"\n",(0,jsx_runtime.jsx)(_components.h3,{id:"default-value",children:"Default value"}),"\n",(0,jsx_runtime.jsxs)(_components.p,{children:["Show options as pre-selected by setting the ",(0,jsx_runtime.jsx)(_components.code,{children:"value"})," prop to an array containing the values of these options."]}),"\n",(0,jsx_runtime.jsx)(dist.Xz,{withSource:"none",children:(0,jsx_runtime.jsx)(dist.oG,{name:"Default Value",children:DefaultValue()})}),"\n",(0,jsx_runtime.jsx)(_components.h4,{id:"default-value-code-example",children:"Default value code example"}),"\n",(0,jsx_runtime.jsx)(_components.pre,{children:(0,jsx_runtime.jsx)(_components.code,{className:"language-html",children:'<ic-select-with-multi\n  id="select-default-value"\n  label="What are your favourite types of coffee?"\n  multiple\n></ic-select-with-multi>\n<script>\n  var select = document.querySelector("#select-default-value");\n  select.value = ["Ame", "Fil", "Moc"];\n  select.options = [\n    { label: "Cappuccino", value: "Cap" },\n    { label: "Latte", value: "Lat" },\n    { label: "Americano", value: "Ame" },\n    { label: "Filter", value: "Fil" },\n    { label: "Flat white", value: "Fla" },\n    { label: "Mocha", value: "Moc" },\n    { label: "Macchiato", value: "Mac" },\n  ];\n  select.addEventListener("icChange", function (event) {\n    console.log(event.detail.value);\n  });\n<\/script>\n'})}),"\n",(0,jsx_runtime.jsx)(_components.h3,{id:"with-clear-button",children:"With clear button"}),"\n",(0,jsx_runtime.jsxs)(_components.p,{children:["Display a clear button by using the ",(0,jsx_runtime.jsx)(_components.code,{children:"show-clear-button"})," prop.\nThis will appear when the user has selected some options and allow them to easily clear their selection."]}),"\n",(0,jsx_runtime.jsx)(dist.Xz,{withSource:"none",children:(0,jsx_runtime.jsx)(dist.oG,{name:"With Clear Button",children:WithClearButton()})}),"\n",(0,jsx_runtime.jsx)(_components.h4,{id:"with-clear-button-code-example",children:"With clear button code example"}),"\n",(0,jsx_runtime.jsx)(_components.pre,{children:(0,jsx_runtime.jsx)(_components.code,{className:"language-html",children:'<ic-select-with-multi\n  id="select-clear"\n  label="What are your favourite types of coffee?"\n  multiple\n  show-clear-button\n></ic-select-with-multi>\n<script>\n  var select = document.querySelector("#select-clear");\n  select.options = [\n    { label: "Cappuccino", value: "Cap" },\n    { label: "Latte", value: "Lat" },\n    { label: "Americano", value: "Ame" },\n    { label: "Filter", value: "Fil" },\n    { label: "Flat white", value: "Fla" },\n    { label: "Mocha", value: "Moc" },\n    { label: "Macchiato", value: "Mac" },\n  ];\n  select.addEventListener("icChange", function (event) {\n    console.log(event.detail.value);\n  });\n<\/script>\n'})}),"\n",(0,jsx_runtime.jsx)(_components.h3,{id:"with-descriptions",children:"With descriptions"}),"\n",(0,jsx_runtime.jsxs)(_components.p,{children:["Display extra information about the options by providing a description using the ",(0,jsx_runtime.jsx)(_components.code,{children:"description"})," property for each option."]}),"\n",(0,jsx_runtime.jsx)(dist.Xz,{withSource:"none",children:(0,jsx_runtime.jsx)(dist.oG,{name:"With Descriptions",children:WithDescriptions()})}),"\n",(0,jsx_runtime.jsx)(_components.h4,{id:"with-descriptions-code-example",children:"With descriptions code example"}),"\n",(0,jsx_runtime.jsx)(_components.pre,{children:(0,jsx_runtime.jsx)(_components.code,{className:"language-html",children:'<ic-select-with-multi\n  id="select-descriptions"\n  label="What are your favourite types of coffee?"\n  multiple\n></ic-select-with-multi>\n<script>\n  var select = document.querySelector("#select-descriptions");\n  select.options = [\n    {\n      label: "Cappuccino",\n      value: "Cap",\n      description: "Coffee frothed up with pressurised steam",\n    },\n    {\n      label: "Latte",\n      value: "Lat",\n      description: "A milkier coffee than a cappuccino",\n    },\n    {\n      label: "Americano",\n      value: "Ame",\n      description: "Espresso coffee diluted with hot water",\n    },\n    {\n      label: "Filter",\n      value: "Fil",\n      description: "Coffee filtered using paper or a mesh",\n    },\n    {\n      label: "Flat white",\n      value: "Fla",\n      description:\n        "Coffee without froth made with espresso and hot steamed milk",\n    },\n    {\n      label: "Mocha",\n      value: "Moc",\n      description: "A mixture of coffee and chocolate",\n    },\n    {\n      label: "Macchiato",\n      value: "Mac",\n      description: "Espresso coffee with a dash of frothy steamed milk",\n    },\n  ];\n  select.addEventListener("icChange", function (event) {\n    console.log(event.detail.value);\n  });\n<\/script>\n'})}),"\n",(0,jsx_runtime.jsx)(_components.h3,{id:"helper-text",children:"Helper text"}),"\n",(0,jsx_runtime.jsxs)(_components.p,{children:["Display helper text to provide additional information by using the ",(0,jsx_runtime.jsx)(_components.code,{children:"helper-text"})," prop."]}),"\n",(0,jsx_runtime.jsx)(dist.Xz,{withSource:"none",children:(0,jsx_runtime.jsx)(dist.oG,{name:"Helper Text",children:HelperText()})}),"\n",(0,jsx_runtime.jsx)(_components.h4,{id:"helper-text-code-example",children:"Helper text code example"}),"\n",(0,jsx_runtime.jsx)(_components.pre,{children:(0,jsx_runtime.jsx)(_components.code,{className:"language-html",children:'<ic-select-with-multi\n  id="select-helper"\n  label="What are your favourite types of coffee?"\n  helper-text="Select some options from the list"\n  multiple\n></ic-select-with-multi>\n<script>\n  var select = document.querySelector("#select-helper");\n  select.options = [\n    { label: "Cappuccino", value: "Cap" },\n    { label: "Latte", value: "Lat" },\n    { label: "Americano", value: "Ame" },\n    { label: "Filter", value: "Fil" },\n    { label: "Flat white", value: "Fla" },\n    { label: "Mocha", value: "Moc" },\n    { label: "Macchiato", value: "Mac" },\n  ];\n  select.addEventListener("icChange", function (event) {\n    console.log(event.detail.value);\n  });\n<\/script>\n'})}),"\n",(0,jsx_runtime.jsx)(_components.h3,{id:"sizes",children:"Sizes"}),"\n",(0,jsx_runtime.jsxs)(_components.p,{children:["Set the size of the multi-select by using the ",(0,jsx_runtime.jsx)(_components.code,{children:"size"})," prop. This prop takes the values ",(0,jsx_runtime.jsx)(_components.code,{children:"small"}),", ",(0,jsx_runtime.jsx)(_components.code,{children:"default"})," or ",(0,jsx_runtime.jsx)(_components.code,{children:"large"}),".\nDepending on the chosen size, the prop will apply styling to increase or decrease the amount of spacing within the component.\nThe ",(0,jsx_runtime.jsx)(_components.code,{children:"default"})," variant is seen in the first ",(0,jsx_runtime.jsx)(_components.a,{href:"#default",children:"default"})," example."]}),"\n",(0,jsx_runtime.jsx)(dist.Xz,{withSource:"none",children:(0,jsx_runtime.jsx)(dist.oG,{name:"Sizes",children:Sizes()})}),"\n",(0,jsx_runtime.jsx)(_components.h4,{id:"sizes-code-example",children:"Sizes code example"}),"\n",(0,jsx_runtime.jsx)(_components.pre,{children:(0,jsx_runtime.jsx)(_components.code,{className:"language-html",children:'<div style="display: flex; flex-direction: column; gap: 16px;">\n  <ic-select-with-multi\n    id="select-size-small"\n    label="What are your favourite types of coffee?"\n    multiple\n    size="small"\n  ></ic-select-with-multi>\n  <script>\n    var select1 = document.querySelector("#select-size-small");\n    select1.options = [\n      { label: "Cappuccino", value: "Cap" },\n      { label: "Latte", value: "Lat" },\n      { label: "Americano", value: "Ame" },\n      { label: "Filter", value: "Fil" },\n      { label: "Flat white", value: "Fla" },\n      { label: "Mocha", value: "Moc" },\n      { label: "Macchiato", value: "Mac" },\n    ];\n    select1.addEventListener("icChange", function (event) {\n      console.log(event.detail.value);\n    });\n  <\/script>\n  <ic-select-with-multi\n    id="select-size-default"\n    label="What are your favourite types of coffee?"\n    multiple\n  ></ic-select-with-multi>\n  <script>\n    var select2 = document.querySelector("#select-size-default");\n    select2.options = [\n      { label: "Cappuccino", value: "Cap" },\n      { label: "Latte", value: "Lat" },\n      { label: "Americano", value: "Ame" },\n      { label: "Filter", value: "Fil" },\n      { label: "Flat white", value: "Fla" },\n      { label: "Mocha", value: "Moc" },\n      { label: "Macchiato", value: "Mac" },\n    ];\n    select2.addEventListener("icChange", function (event) {\n      console.log(event.detail.value);\n    });\n  <\/script>\n  <ic-select-with-multi\n    id="select-size-large"\n    label="What are your favourite types of coffee?"\n    multiple\n    size="large"\n  ></ic-select-with-multi>\n  <script>\n    var select3 = document.querySelector("#select-size-large");\n    select3.options = [\n      { label: "Cappuccino", value: "Cap" },\n      { label: "Latte", value: "Lat" },\n      { label: "Americano", value: "Ame" },\n      { label: "Filter", value: "Fil" },\n      { label: "Flat white", value: "Fla" },\n      { label: "Mocha", value: "Moc" },\n      { label: "Macchiato", value: "Mac" },\n    ];\n    select3.addEventListener("icChange", function (event) {\n      console.log(event.detail.value);\n    });\n  <\/script>\n</div>\n'})}),"\n",(0,jsx_runtime.jsx)(_components.h3,{id:"disabled",children:"Disabled"}),"\n",(0,jsx_runtime.jsxs)(_components.p,{children:["Disable the multi-select and prevent user interaction by using the ",(0,jsx_runtime.jsx)(_components.code,{children:"disabled"})," prop."]}),"\n",(0,jsx_runtime.jsx)(dist.Xz,{withSource:"none",children:(0,jsx_runtime.jsx)(dist.oG,{name:"Disabled",children:Disabled()})}),"\n",(0,jsx_runtime.jsx)(_components.h4,{id:"disabled-code-example",children:"Disabled code example"}),"\n",(0,jsx_runtime.jsx)(_components.pre,{children:(0,jsx_runtime.jsx)(_components.code,{className:"language-html",children:'<ic-select-with-multi\n  id="select-disabled"\n  label="What are your favourite types of coffee?"\n  multiple\n  disabled\n></ic-select-with-multi>\n<script>\n  var select = document.querySelector("#select-disabled");\n  select.options = [\n    { label: "Cappuccino", value: "Cap" },\n    { label: "Latte", value: "Lat" },\n    { label: "Americano", value: "Ame" },\n    { label: "Filter", value: "Fil" },\n    { label: "Flat white", value: "Fla" },\n    { label: "Mocha", value: "Moc" },\n    { label: "Macchiato", value: "Mac" },\n  ];\n  select.addEventListener("icChange", function (event) {\n    console.log(event.detail.value);\n  });\n<\/script>\n'})}),"\n",(0,jsx_runtime.jsx)(_components.h3,{id:"disabled-options",children:"Disabled options"}),"\n",(0,jsx_runtime.jsxs)(_components.p,{children:["Disable certain options by setting the ",(0,jsx_runtime.jsx)(_components.code,{children:"disabled"})," property to ",(0,jsx_runtime.jsx)(_components.code,{children:"true"})," for each option."]}),"\n",(0,jsx_runtime.jsx)(dist.Xz,{withSource:"none",children:(0,jsx_runtime.jsx)(dist.oG,{name:"Disabled Options",children:DisabledOptions()})}),"\n",(0,jsx_runtime.jsx)(_components.h4,{id:"disabled-options-code-example",children:"Disabled options code example"}),"\n",(0,jsx_runtime.jsx)(_components.pre,{children:(0,jsx_runtime.jsx)(_components.code,{className:"language-html",children:'<ic-select-with-multi\n  id="select-disabled-options"\n  label="What are your favourite types of coffee?"\n  multiple\n></ic-select-with-multi>\n<script>\n  var select = document.querySelector("#select-disabled-options");\n  select.options = [\n    { label: "Cappuccino", value: "Cap" },\n    { label: "Latte", value: "Lat", disabled: true },\n    { label: "Americano", value: "Ame" },\n    { label: "Filter", value: "Fil", disabled: true },\n    { label: "Flat white", value: "Fla", disabled: true },\n    { label: "Mocha", value: "Moc" },\n    { label: "Macchiato", value: "Mac" },\n  ];\n  select.addEventListener("icChange", function (event) {\n    console.log(event.detail.value);\n  });\n<\/script>\n'})}),"\n",(0,jsx_runtime.jsx)(_components.h3,{id:"hidden-label",children:"Hidden label"}),"\n",(0,jsx_runtime.jsxs)(_components.p,{children:["Hide the visible label for the multi-select by using the ",(0,jsx_runtime.jsx)(_components.code,{children:"hide-label"})," prop."]}),"\n",(0,jsx_runtime.jsx)(dist.Xz,{withSource:"none",children:(0,jsx_runtime.jsx)(dist.oG,{name:"Hidden Label",children:HiddenLabel()})}),"\n",(0,jsx_runtime.jsx)(_components.h4,{id:"hidden-label-code-example",children:"Hidden label code example"}),"\n",(0,jsx_runtime.jsx)(_components.pre,{children:(0,jsx_runtime.jsx)(_components.code,{className:"language-html",children:'<ic-select-with-multi\n  id="select-hidden-label"\n  label="What are your favourite types of coffee?"\n  multiple\n  hide-label\n></ic-select-with-multi>\n<script>\n  var select = document.querySelector("#select-hidden-label");\n  select.options = [\n    { label: "Cappuccino", value: "Cap" },\n    { label: "Latte", value: "Lat" },\n    { label: "Americano", value: "Ame" },\n    { label: "Filter", value: "Fil" },\n    { label: "Flat white", value: "Fla" },\n    { label: "Mocha", value: "Moc" },\n    { label: "Macchiato", value: "Mac" },\n  ];\n  select.addEventListener("icChange", function (event) {\n    console.log(event.detail.value);\n  });\n<\/script>\n'})}),"\n",(0,jsx_runtime.jsx)(_components.h3,{id:"required",children:"Required"}),"\n",(0,jsx_runtime.jsxs)(_components.p,{children:["Inform the user that the multi-select is a required field by using the ",(0,jsx_runtime.jsx)(_components.code,{children:"required"})," prop.\nThis will display an asterisk next to the label and apply the ",(0,jsx_runtime.jsx)(_components.code,{children:"aria-required"})," attribute."]}),"\n",(0,jsx_runtime.jsx)(dist.Xz,{withSource:"none",children:(0,jsx_runtime.jsx)(dist.oG,{name:"Required",children:Required()})}),"\n",(0,jsx_runtime.jsx)(_components.h4,{id:"required-code-example",children:"Required code example"}),"\n",(0,jsx_runtime.jsx)(_components.pre,{children:(0,jsx_runtime.jsx)(_components.code,{className:"language-html",children:'<ic-select-with-multi\n  id="select-required"\n  label="What are your favourite types of coffee?"\n  multiple\n  required\n></ic-select-with-multi>\n<script>\n  var select = document.querySelector("#select-required");\n  select.options = [\n    { label: "Cappuccino", value: "Cap" },\n    { label: "Latte", value: "Lat" },\n    { label: "Americano", value: "Ame" },\n    { label: "Filter", value: "Fil" },\n    { label: "Flat white", value: "Fla" },\n    { label: "Mocha", value: "Moc" },\n    { label: "Macchiato", value: "Mac" },\n  ];\n  select.addEventListener("icChange", function (event) {\n    console.log(event.detail.value);\n  });\n<\/script>\n'})}),"\n",(0,jsx_runtime.jsx)(_components.h3,{id:"read-only",children:"Read-only"}),"\n",(0,jsx_runtime.jsxs)(_components.p,{children:["Make the multi-select read-only by using the ",(0,jsx_runtime.jsx)(_components.code,{children:"readonly"})," prop.\nUse the ",(0,jsx_runtime.jsx)(_components.code,{children:"value"})," prop to set which options are selected and will be displayed when it is read-only."]}),"\n",(0,jsx_runtime.jsx)(dist.Xz,{withSource:"none",children:(0,jsx_runtime.jsx)(dist.oG,{name:"Read-only",children:ReadOnly()})}),"\n",(0,jsx_runtime.jsx)(_components.h4,{id:"read-only-code-example",children:"Read-only code example"}),"\n",(0,jsx_runtime.jsx)(_components.pre,{children:(0,jsx_runtime.jsx)(_components.code,{className:"language-html",children:'<ic-select-with-multi\n  id="select-read-only"\n  label="What are your favourite types of coffee?"\n  multiple\n  readonly\n></ic-select-with-multi>\n<script>\n  var select = document.querySelector("#select-read-only");\n  select.options = [\n    { label: "Cappuccino", value: "Cap" },\n    { label: "Latte", value: "Lat" },\n    { label: "Americano", value: "Ame" },\n    { label: "Filter", value: "Fil" },\n    { label: "Flat white", value: "Fla" },\n    { label: "Mocha", value: "Moc" },\n    { label: "Macchiato", value: "Mac" },\n  ];\n  select.value = ["Cap", "Fla", "Moc"];\n  select.addEventListener("icChange", function (event) {\n    console.log(event.detail.value);\n  });\n<\/script>\n'})}),"\n",(0,jsx_runtime.jsx)(_components.h3,{id:"groups",children:"Groups"}),"\n",(0,jsx_runtime.jsxs)(_components.p,{children:["Display options in groups by passing an array of child options to the ",(0,jsx_runtime.jsx)(_components.code,{children:"children"})," property of a parent option.\nThe parent option will be rendered as the title of the group."]}),"\n",(0,jsx_runtime.jsx)(dist.Xz,{withSource:"none",children:(0,jsx_runtime.jsx)(dist.oG,{name:"Groups",children:Groups()})}),"\n",(0,jsx_runtime.jsx)(_components.h4,{id:"groups-code-example",children:"Groups code example"}),"\n",(0,jsx_runtime.jsx)(_components.pre,{children:(0,jsx_runtime.jsx)(_components.code,{className:"language-html",children:'<ic-select-with-multi\n  id="select-groups"\n  label="What are your favourite types of coffee?"\n  multiple\n></ic-select-with-multi>\n<script>\n  var select = document.querySelector("#select-groups");\n  select.options = [\n    {\n      label: "Fancy",\n      children: [\n        { label: "Cappuccino", value: "Cap" },\n        { label: "Flat white", value: "Flat" },\n      ],\n    },\n    {\n      label: "Boring",\n      children: [\n        { label: "Filter", value: "Fil" },\n        { label: "Latte", value: "Lat" },\n      ],\n    },\n  ];\n  select.addEventListener("icChange", function (event) {\n    console.log(event.detail.value);\n  });\n<\/script>\n'})}),"\n",(0,jsx_runtime.jsx)(_components.h3,{id:"recommended",children:"Recommended"}),"\n",(0,jsx_runtime.jsxs)(_components.p,{children:["Display certain options at the top of the option list by setting the ",(0,jsx_runtime.jsx)(_components.code,{children:"recommended"})," property to ",(0,jsx_runtime.jsx)(_components.code,{children:"true"})," on each option.\nThis will allow for quick access to these options."]}),"\n",(0,jsx_runtime.jsx)(dist.Xz,{withSource:"none",children:(0,jsx_runtime.jsx)(dist.oG,{name:"Recommended",children:Recommended()})}),"\n",(0,jsx_runtime.jsx)(_components.h4,{id:"recommended-code-example",children:"Recommended code example"}),"\n",(0,jsx_runtime.jsx)(_components.pre,{children:(0,jsx_runtime.jsx)(_components.code,{className:"language-html",children:'<ic-select-with-multi\n  id="select-recommended"\n  label="What are your favourite types of coffee?"\n  multiple\n></ic-select-with-multi>\n<script>\n  var select = document.querySelector("#select-recommended");\n  select.options = [\n    { label: "Cappuccino", value: "Cap" },\n    { label: "Latte", value: "Lat" },\n    { label: "Americano", value: "Ame", recommended: true },\n    { label: "Filter", value: "Fil" },\n    { label: "Flat white", value: "Fla", recommended: true },\n    { label: "Mocha", value: "Moc" },\n    { label: "Macchiato", value: "Mac" },\n  ];\n  select.addEventListener("icChange", function (event) {\n    console.log(event.detail.value);\n  });\n<\/script>\n'})}),"\n",(0,jsx_runtime.jsx)(_components.h3,{id:"validation",children:"Validation"}),"\n",(0,jsx_runtime.jsxs)(_components.p,{children:["Display a validation status and message by using the ",(0,jsx_runtime.jsx)(_components.code,{children:"validation-status"})," and ",(0,jsx_runtime.jsx)(_components.code,{children:"validation-message"})," props.\nThe ",(0,jsx_runtime.jsx)(_components.code,{children:"validation-status"})," prop takes the values ",(0,jsx_runtime.jsx)(_components.code,{children:"success"}),", ",(0,jsx_runtime.jsx)(_components.code,{children:"warning"})," or ",(0,jsx_runtime.jsx)(_components.code,{children:"error"}),"."]}),"\n",(0,jsx_runtime.jsx)(dist.Xz,{withSource:"none",children:(0,jsx_runtime.jsx)(dist.oG,{name:"Validation",children:Validation()})}),"\n",(0,jsx_runtime.jsx)(_components.h4,{id:"validation-code-example",children:"Validation code example"}),"\n",(0,jsx_runtime.jsx)(_components.pre,{children:(0,jsx_runtime.jsx)(_components.code,{className:"language-html",children:'<ic-select-with-multi\n  id="select-success"\n  label="What are your favourite types of coffee?"\n  validation-status="success"\n  validation-text="Coffee available"\n  multiple\n></ic-select-with-multi>\n<script>\n  var select1 = document.querySelector("#select-success");\n  select1.options = [\n    { label: "Cappuccino", value: "Cap" },\n    { label: "Latte", value: "Lat" },\n    { label: "Americano", value: "Ame" },\n    { label: "Filter", value: "Fil" },\n    { label: "Flat white", value: "Fla" },\n    { label: "Mocha", value: "Moc" },\n    { label: "Macchiato", value: "Mac" },\n  ];\n  select1.addEventListener("icChange", function (event) {\n    console.log(event.detail.value);\n  });\n<\/script>\n<ic-select-with-multi\n  id="select-warning"\n  label="What are your favourite types of coffee?"\n  validation-status="warning"\n  validation-text="Only a few left"\n  multiple\n></ic-select-with-multi>\n<script>\n  var select2 = document.querySelector("#select-warning");\n  select2.options = [\n    { label: "Cappuccino", value: "Cap" },\n    { label: "Latte", value: "Lat" },\n    { label: "Americano", value: "Ame" },\n    { label: "Filter", value: "Fil" },\n    { label: "Flat white", value: "Fla" },\n    { label: "Mocha", value: "Moc" },\n    { label: "Macchiato", value: "Mac" },\n  ];\n  select2.addEventListener("icChange", function (event) {\n    console.log(event.detail.value);\n  });\n<\/script>\n<ic-select-with-multi\n  id="select-error"\n  label="What are your favourite types of coffee?"\n  validation-status="error"\n  validation-text="Coffee unavailable"\n  multiple\n></ic-select-with-multi>\n<script>\n  var select3 = document.querySelector("#select-error");\n  select3.options = [\n    { label: "Cappuccino", value: "Cap" },\n    { label: "Latte", value: "Lat" },\n    { label: "Americano", value: "Ame" },\n    { label: "Filter", value: "Fil" },\n    { label: "Flat white", value: "Fla" },\n    { label: "Mocha", value: "Moc" },\n    { label: "Macchiato", value: "Mac" },\n  ];\n  select3.addEventListener("icChange", function (event) {\n    console.log(event.detail.value);\n  });\n<\/script>\n'})}),"\n",(0,jsx_runtime.jsx)(_components.h3,{id:"loading-with-error",children:"Loading with error"}),"\n",(0,jsx_runtime.jsxs)(_components.p,{children:["Display the loading state by using the ",(0,jsx_runtime.jsx)(_components.code,{children:"loading"})," prop.\nThe multi-select will show a loading error after the amount of time specified using the ",(0,jsx_runtime.jsx)(_components.code,{children:"timeout"})," prop has elapsed."]}),"\n",(0,jsx_runtime.jsx)(dist.Xz,{withSource:"none",children:(0,jsx_runtime.jsx)(dist.oG,{name:"Loading With Error",children:LoadingWithError()})}),"\n",(0,jsx_runtime.jsx)(_components.h4,{id:"loading-with-error-code-example",children:"Loading with error code example"}),"\n",(0,jsx_runtime.jsx)(_components.pre,{children:(0,jsx_runtime.jsx)(_components.code,{className:"language-html",children:'<ic-select-with-multi\n  id="select-loading"\n  label="What are your favourite types of coffee?"\n  multiple\n  loading\n  timeout="1000"\n></ic-select-with-multi>\n<script>\n  var select = document.querySelector("#select-loading");\n  select.options = [\n    { label: "Cappuccino", value: "Cap" },\n    { label: "Latte", value: "Lat" },\n    { label: "Americano", value: "Ame" },\n    { label: "Filter", value: "Fil" },\n    { label: "Flat white", value: "Fla" },\n    { label: "Mocha", value: "Moc" },\n    { label: "Macchiato", value: "Mac" },\n  ];\n  select.addEventListener("icChange", function (event) {\n    console.log(event.detail.value);\n  });\n  select.addEventListener("icRetryLoad", function (event) {\n    select.loading = "true";\n  });\n<\/script>\n'})}),"\n",(0,jsx_runtime.jsx)(_components.h3,{id:"in-form",children:"In form"}),"\n",(0,jsx_runtime.jsx)(_components.p,{children:"An example of the multi-select working in a form. The value will appear in the console on submit."}),"\n",(0,jsx_runtime.jsx)(dist.Xz,{withSource:"none",children:(0,jsx_runtime.jsx)(dist.oG,{name:"In Form",children:InForm()})}),"\n",(0,jsx_runtime.jsx)(_components.h4,{id:"in-form-code-example",children:"In form code example"}),"\n",(0,jsx_runtime.jsx)(_components.pre,{children:(0,jsx_runtime.jsx)(_components.code,{className:"language-html",children:'<form>\n  <ic-select-with-multi\n    id="select-form"\n    label="What are your favourite types of coffee?"\n    multiple\n  ></ic-select-with-multi>\n  <br />\n  <br />\n  <input type="submit" value="Submit" />\n  <input type="reset" value="Reset" />\n</form>\n<script>\n  var select = document.querySelector("#select-form");\n  select.options = [\n    { label: "Cappuccino", value: "Cap" },\n    { label: "Latte", value: "Lat" },\n    { label: "Americano", value: "Ame" },\n    { label: "Filter", value: "Fil" },\n    { label: "Flat white", value: "Fla" },\n    { label: "Mocha", value: "Moc" },\n    { label: "Macchiato", value: "Mac" },\n  ];\n  select.addEventListener("icChange", function (event) {\n    console.log(event.detail.value);\n  });\n  document.querySelector("form").addEventListener("submit", (ev) => {\n    ev.preventDefault();\n    console.log(document.querySelector("input.ic-input").value);\n  });\n<\/script>\n'})})]})}const defaultStory=()=>Default();defaultStory.storyName="Default",defaultStory.parameters={storySource:{source:"Default()"}};const defaultValue=()=>DefaultValue();defaultValue.storyName="Default Value",defaultValue.parameters={storySource:{source:"DefaultValue()"}};const withClearButton=()=>WithClearButton();withClearButton.storyName="With Clear Button",withClearButton.parameters={storySource:{source:"WithClearButton()"}};const withDescriptions=()=>WithDescriptions();withDescriptions.storyName="With Descriptions",withDescriptions.parameters={storySource:{source:"WithDescriptions()"}};const helperText=()=>HelperText();helperText.storyName="Helper Text",helperText.parameters={storySource:{source:"HelperText()"}};const sizes=()=>Sizes();sizes.storyName="Sizes",sizes.parameters={storySource:{source:"Sizes()"}};const disabled=()=>Disabled();disabled.storyName="Disabled",disabled.parameters={storySource:{source:"Disabled()"}};const disabledOptions=()=>DisabledOptions();disabledOptions.storyName="Disabled Options",disabledOptions.parameters={storySource:{source:"DisabledOptions()"}};const hiddenLabel=()=>HiddenLabel();hiddenLabel.storyName="Hidden Label",hiddenLabel.parameters={storySource:{source:"HiddenLabel()"}};const required=()=>Required();required.storyName="Required",required.parameters={storySource:{source:"Required()"}};const readOnly=()=>ReadOnly();readOnly.storyName="Read-only",readOnly.parameters={storySource:{source:"ReadOnly()"}};const groups=()=>Groups();groups.storyName="Groups",groups.parameters={storySource:{source:"Groups()"}};const recommended=()=>Recommended();recommended.storyName="Recommended",recommended.parameters={storySource:{source:"Recommended()"}};const validation=()=>Validation();validation.storyName="Validation",validation.parameters={storySource:{source:"Validation()"}};const loadingWithError=()=>LoadingWithError();loadingWithError.storyName="Loading With Error",loadingWithError.parameters={storySource:{source:"LoadingWithError()"}};const inForm=()=>InForm();inForm.storyName="In Form",inForm.parameters={storySource:{source:"InForm()"}};const componentMeta={title:"Web Components/Multi-Select",parameters:{componentAPI:{data:readme_namespaceObject}},tags:["stories-mdx"],includeStories:["defaultStory","defaultValue","withClearButton","withDescriptions","helperText","sizes","disabled","disabledOptions","hiddenLabel","required","readOnly","groups","recommended","validation","loadingWithError","inForm"]};componentMeta.parameters=componentMeta.parameters||{},componentMeta.parameters.docs={...componentMeta.parameters.docs||{},page:function MDXContent(props={}){const{wrapper:MDXLayout}=Object.assign({},(0,lib.ah)(),props.components);return MDXLayout?(0,jsx_runtime.jsx)(MDXLayout,{...props,children:(0,jsx_runtime.jsx)(_createMdxContent,{...props})}):_createMdxContent(props)}};const ic_select_multi_stories=componentMeta,__namedExportsOrder=["defaultArgs","defaultStory","defaultValue","withClearButton","withDescriptions","helperText","sizes","disabled","disabledOptions","hiddenLabel","required","readOnly","groups","recommended","validation","loadingWithError","inForm"]},"./node_modules/memoizerific sync recursive":module=>{function webpackEmptyContext(req){var e=new Error("Cannot find module '"+req+"'");throw e.code="MODULE_NOT_FOUND",e}webpackEmptyContext.keys=()=>[],webpackEmptyContext.resolve=webpackEmptyContext,webpackEmptyContext.id="./node_modules/memoizerific sync recursive",module.exports=webpackEmptyContext},"./node_modules/react/cjs/react-jsx-runtime.production.min.js":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";__webpack_require__("./node_modules/object-assign/index.js");var f=__webpack_require__("./node_modules/react/index.js"),g=60103;if(exports.Fragment=60107,"function"==typeof Symbol&&Symbol.for){var h=Symbol.for;g=h("react.element"),exports.Fragment=h("react.fragment")}var m=f.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,n=Object.prototype.hasOwnProperty,p={key:!0,ref:!0,__self:!0,__source:!0};function q(c,a,k){var b,d={},e=null,l=null;for(b in void 0!==k&&(e=""+k),void 0!==a.key&&(e=""+a.key),void 0!==a.ref&&(l=a.ref),a)n.call(a,b)&&!p.hasOwnProperty(b)&&(d[b]=a[b]);if(c&&c.defaultProps)for(b in a=c.defaultProps)void 0===d[b]&&(d[b]=a[b]);return{$$typeof:g,type:c,key:e,ref:l,props:d,_owner:m.current}}exports.jsx=q,exports.jsxs=q},"./node_modules/react/jsx-runtime.js":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";module.exports=__webpack_require__("./node_modules/react/cjs/react-jsx-runtime.production.min.js")}}]);