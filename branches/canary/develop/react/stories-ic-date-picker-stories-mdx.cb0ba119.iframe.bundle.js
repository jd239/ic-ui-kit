/*! For license information please see stories-ic-date-picker-stories-mdx.cb0ba119.iframe.bundle.js.LICENSE.txt */
"use strict";(self.webpackChunk_ukic_canary_react=self.webpackChunk_ukic_canary_react||[]).push([[2925],{"./node_modules/@mdx-js/react/lib/index.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{NF:()=>withMDXComponents,Zo:()=>MDXProvider,ah:()=>useMDXComponents,pC:()=>MDXContext});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/react/index.js");const MDXContext=react__WEBPACK_IMPORTED_MODULE_0__.createContext({});function withMDXComponents(Component){return function boundMDXComponent(props){const allComponents=useMDXComponents(props.components);return react__WEBPACK_IMPORTED_MODULE_0__.createElement(Component,{...props,allComponents})}}function useMDXComponents(components){const contextComponents=react__WEBPACK_IMPORTED_MODULE_0__.useContext(MDXContext);return react__WEBPACK_IMPORTED_MODULE_0__.useMemo((()=>"function"==typeof components?components(contextComponents):{...contextComponents,...components}),[contextComponents,components])}const emptyObject={};function MDXProvider({components,children,disableParentContext}){let allComponents;return allComponents=disableParentContext?"function"==typeof components?components({}):components||emptyObject:useMDXComponents(components),react__WEBPACK_IMPORTED_MODULE_0__.createElement(MDXContext.Provider,{value:allComponents},children)}},"./node_modules/@storybook/addon-docs/dist/index.mjs":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{Xz:()=>_storybook_blocks__WEBPACK_IMPORTED_MODULE_1__.Xz,h_:()=>_storybook_blocks__WEBPACK_IMPORTED_MODULE_1__.h_,oG:()=>_storybook_blocks__WEBPACK_IMPORTED_MODULE_1__.oG});__webpack_require__("./node_modules/@storybook/addon-docs/dist/chunk-HLWAVYOI.mjs");var _storybook_blocks__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/@storybook/blocks/dist/index.mjs")},"./src/stories/ic-date-picker.stories.mdx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{DatePickerWithIcChange:()=>DatePickerWithIcChange,__namedExportsOrder:()=>__namedExportsOrder,dateFormats:()=>dateFormats,daysOutsideMonthHidden:()=>daysOutsideMonthHidden,default:()=>ic_date_picker_stories,defaultStory:()=>defaultStory,disableDatesInFuture:()=>disableDatesInFuture,disableDatesInPast:()=>disableDatesInPast,disableDaysOfWeek:()=>disableDaysOfWeek,disabled:()=>disabled,disabledDaysOfWeek:()=>disabledDaysOfWeek,icChangeEvent:()=>icChangeEvent,javaScriptDates:()=>javaScriptDates,maxMin:()=>maxMin,maxWidth:()=>maxWidth,openAtDate:()=>openAtDate,sizes:()=>sizes,startOfWeek:()=>startOfWeek,todayClearButtonsHidden:()=>todayClearButtonsHidden,value:()=>value});var react=__webpack_require__("./node_modules/react/index.js"),lib=__webpack_require__("./node_modules/@mdx-js/react/lib/index.js"),dist=__webpack_require__("./node_modules/@storybook/addon-docs/dist/index.mjs"),components=__webpack_require__("./src/components.ts");const readme_namespaceObject='# ic-date-picker\n\n\n\n\x3c!-- Auto Generated Below --\x3e\n\n\n## Properties\n\n| Property                | Attribute                  | Description                                                                                                                                                                                                                                            | Type                                                                                                                                                      | Default                                                                                                 |\n| ----------------------- | -------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ | --------------------------------------------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------- |\n| `dateFormat`            | `date-format`              | The format in which the date will be displayed.                                                                                                                                                                                                        | `"DD/MM/YYYY" \\| "MM/DD/YYYY" \\| "YYYY/MM/DD"`                                                                                                            | `"DD/MM/YYYY"`                                                                                          |\n| `disableDays`           | --                         | The days of the week to disable.                                                                                                                                                                                                                       | `IcWeekDays[]`                                                                                                                                            | `[]`                                                                                                    |\n| `disableDaysMessage`    | `disable-days-message`     | The text to display as the validation message when `disableDays` is `true` and a disabled date is entered.                                                                                                                                             | `string`                                                                                                                                                  | `"The date you have selected is on a day of the week that is not allowed. Please select another date."` |\n| `disableFuture`         | `disable-future`           | If `true`, dates in the future are not allowed. A validation message will appear if a date in the future is entered.                                                                                                                                   | `boolean`                                                                                                                                                 | `false`                                                                                                 |\n| `disableFutureMessage`  | `disable-future-message`   | The text to display as the validation message when `disableFuture` is `true` and a date in the future is entered.                                                                                                                                      | `string`                                                                                                                                                  | `"Dates in the future are not allowed. Please select a date in the past."`                              |\n| `disablePast`           | `disable-past`             | If `true`, dates in the past are not allowed. A validation message will appear if a date in the past is entered.                                                                                                                                       | `boolean`                                                                                                                                                 | `false`                                                                                                 |\n| `disablePastMessage`    | `disable-past-message`     | The text to display as the validation message when `disablePast` is `true` and a date in the past is entered.                                                                                                                                          | `string`                                                                                                                                                  | `"Dates in the past are not allowed. Please select a date in the future."`                              |\n| `disabled`              | `disabled`                 | If `true`, the disabled state will be set.                                                                                                                                                                                                             | `boolean`                                                                                                                                                 | `false`                                                                                                 |\n| `helperText`            | `helper-text`              | The helper text that will be displayed for additional field guidance. This will default to the text "Use format" along with the `dateFormat` value.                                                                                                    | `string`                                                                                                                                                  | `undefined`                                                                                             |\n| `inputId`               | `input-id`                 | The ID for the input field. The default will be an automatically generated value.                                                                                                                                                                      | `string`                                                                                                                                                  | `undefined`                                                                                             |\n| `label` _(required)_    | `label`                    | The label for the date input.                                                                                                                                                                                                                          | `string`                                                                                                                                                  | `undefined`                                                                                             |\n| `max`                   | `max`                      | The latest date that will be allowed. The value can be in any format supported as `dateFormat`, in ISO 8601 date string format (`yyyy-mm-dd`) or as a JavaScript `Date` object. The value of this prop is ignored if `disableFuture` is set to `true`. | `Date \\| string`                                                                                                                                          | `""`                                                                                                    |\n| `min`                   | `min`                      | The earliest date that will be allowed. The value can be in any format supported as `dateFormat`, in ISO 8601 date string format (`yyyy-mm-dd`) or as a JavaScript `Date` object. The value of this prop is ignored if `disablePast` is set to `true`. | `Date \\| string`                                                                                                                                          | `""`                                                                                                    |\n| `name`                  | `name`                     | The name of the control, which is submitted with the form data.                                                                                                                                                                                        | `string`                                                                                                                                                  | `undefined`                                                                                             |\n| `openAtDate`            | `open-at-date`             | The date visible when the calendar opens. Used if no date is currently selected. The value can be in any format supported as `dateFormat`, in ISO 8601 date string format (`yyyy-mm-dd`) or as a JavaScript `Date` object.                             | `Date \\| string`                                                                                                                                          | `""`                                                                                                    |\n| `required`              | `required`                 | If `true`, the input will require a value.                                                                                                                                                                                                             | `boolean`                                                                                                                                                 | `false`                                                                                                 |\n| `showDaysOutsideMonth`  | `show-days-outside-month`  | If `true`, days outside the current month will be visible in the date picker.                                                                                                                                                                          | `boolean`                                                                                                                                                 | `true`                                                                                                  |\n| `showPickerClearButton` | `show-picker-clear-button` | If `true`, the `Clear` button on the date picker will be visible.                                                                                                                                                                                      | `boolean`                                                                                                                                                 | `true`                                                                                                  |\n| `showPickerTodayButton` | `show-picker-today-button` | If `true`, the `Go to today` button on the date picker will be visible.                                                                                                                                                                                | `boolean`                                                                                                                                                 | `true`                                                                                                  |\n| `size`                  | `size`                     | The size of the date picker to be displayed.                                                                                                                                                                                                           | `"default" \\| "large" \\| "small"`                                                                                                                         | `"default"`                                                                                             |\n| `startOfWeek`           | `start-of-week`            | The first day of the week. `0` for Sunday, `1` for Monday, etc. Default is Monday.                                                                                                                                                                     | `IcWeekDays.Friday \\| IcWeekDays.Monday \\| IcWeekDays.Saturday \\| IcWeekDays.Sunday \\| IcWeekDays.Thursday \\| IcWeekDays.Tuesday \\| IcWeekDays.Wednesday` | `IcWeekDays.Monday`                                                                                     |\n| `validationStatus`      | `validation-status`        | The validation status - e.g. \'error\' \\| \'warning\' \\| \'success\'. This will override the built-in date validation.                                                                                                                                       | `"" \\| "error" \\| "success" \\| "warning"`                                                                                                                 | `""`                                                                                                    |\n| `validationText`        | `validation-text`          | The text to display as the validation message. This will override the built-in date validation.                                                                                                                                                        | `string`                                                                                                                                                  | `""`                                                                                                    |\n| `value`                 | `value`                    | The value of the date picker. The value can be in any format supported as `dateFormat`, in ISO 8601 date string format (`yyyy-mm-dd`) or as a JavaScript `Date` object.                                                                                | `Date \\| string`                                                                                                                                          | `""`                                                                                                    |\n\n\n## Events\n\n| Event      | Description                         | Type                            |\n| ---------- | ----------------------------------- | ------------------------------- |\n| `icChange` | Emitted when the value has changed. | `CustomEvent<{ value: Date; }>` |\n\n\n## CSS Custom Properties\n\n| Name                       | Description              |\n| -------------------------- | ------------------------ |\n| `--ic-z-index-date-picker` | z-index of date picker.  |\n| `--input-width`            | Width of the input field |\n\n\n## Dependencies\n\n### Depends on\n\n- ic-button\n- [ic-date-input](../ic-date-input)\n- ic-typography\n\n### Graph\n```mermaid\ngraph TD;\n  ic-date-picker --\x3e ic-button\n  ic-date-picker --\x3e ic-date-input\n  ic-date-picker --\x3e ic-typography\n  ic-button --\x3e ic-loading-indicator\n  ic-button --\x3e ic-tooltip\n  ic-loading-indicator --\x3e ic-typography\n  ic-tooltip --\x3e ic-typography\n  ic-date-input --\x3e ic-input-container\n  ic-date-input --\x3e ic-input-label\n  ic-date-input --\x3e ic-input-component-container\n  ic-date-input --\x3e ic-button\n  ic-date-input --\x3e ic-input-validation\n  ic-input-label --\x3e ic-typography\n  ic-input-validation --\x3e ic-typography\n  style ic-date-picker fill:#f9f,stroke:#333,stroke-width:4px\n```\n\n----------------------------------------------\n\n\n';var jsx_runtime=__webpack_require__("./node_modules/react/jsx-runtime.js");const disabledDaysOfWeek=[0,6],DatePickerWithIcChange=()=>{const _components=Object.assign({div:"div",span:"span"},(0,lib.ah)()),[selectedDate,setSelectedDate]=(0,react.useState)(),[value,setValue]=(0,react.useState)();return(0,jsx_runtime.jsxs)(_components.div,{style:{display:"flex",flexDirection:"column",gap:"50px"},children:[(0,jsx_runtime.jsx)(components.A$,{label:"When would you like to collect your coffee?",onIcChange:event=>{setValue(event.detail.value),setSelectedDate(event.detail.value)},value}),(0,jsx_runtime.jsx)(_components.span,{children:`Selected date: ${selectedDate}`})]})};function _createMdxContent(props){const _components=Object.assign({h1:"h1",p:"p",ul:"ul",li:"li",code:"code",h3:"h3",h4:"h4",pre:"pre"},(0,lib.ah)(),props.components);return(0,jsx_runtime.jsxs)(jsx_runtime.Fragment,{children:[(0,jsx_runtime.jsx)(dist.h_,{title:"React Components/Date Picker",component:components.A$,parameters:{componentAPI:{data:readme_namespaceObject}}}),"\n",(0,jsx_runtime.jsx)(_components.h1,{id:"canary-date-picker",children:"[Canary]: Date Picker"}),"\n",(0,jsx_runtime.jsx)(_components.p,{children:"Use a date picker to select a single date where visualising that date could be useful."}),"\n",(0,jsx_runtime.jsx)(_components.p,{children:"There is one required prop for a date picker:"}),"\n",(0,jsx_runtime.jsxs)(_components.ul,{children:["\n",(0,jsx_runtime.jsxs)(_components.li,{children:["label: ",(0,jsx_runtime.jsx)(_components.code,{children:"string"})]}),"\n"]}),"\n",(0,jsx_runtime.jsx)(_components.p,{children:"Click the 'Component API' tab to view all the available props and events for date pickers."}),"\n",(0,jsx_runtime.jsxs)(_components.p,{children:["To use the date picker component, import ",(0,jsx_runtime.jsx)(_components.code,{children:"@ukic/canary-react"})," into your application."]}),"\n",(0,jsx_runtime.jsx)(_components.h3,{id:"default",children:"Default"}),"\n",(0,jsx_runtime.jsxs)(_components.p,{children:["The default date picker, which uses the date format of ",(0,jsx_runtime.jsx)(_components.code,{children:"DD/MM/YYYY"}),"."]}),"\n",(0,jsx_runtime.jsx)(dist.Xz,{withSource:"none",children:(0,jsx_runtime.jsx)(dist.oG,{name:"Default",height:"540px",children:(0,jsx_runtime.jsx)(components.A$,{label:"When would you like to collect your coffee?"})})}),"\n",(0,jsx_runtime.jsx)(_components.h4,{id:"default-code-example",children:"Default code example"}),"\n",(0,jsx_runtime.jsx)(_components.pre,{children:(0,jsx_runtime.jsx)(_components.code,{className:"language-jsx",children:'import * as React from "react";\nimport { IcDatePicker } from "@ukic/canary-react";\n\nconst DatePicker = () => (\n  <IcDatePicker label="When would you like to collect your coffee?" />\n);\n\nexport default DatePicker;\n'})}),"\n",(0,jsx_runtime.jsx)(_components.h3,{id:"sizes",children:"Sizes"}),"\n",(0,jsx_runtime.jsxs)(_components.p,{children:["Set the size of the date picker by using the ",(0,jsx_runtime.jsx)(_components.code,{children:"size"})," prop. This prop takes the values ",(0,jsx_runtime.jsx)(_components.code,{children:"small"}),", ",(0,jsx_runtime.jsx)(_components.code,{children:"default"})," or ",(0,jsx_runtime.jsx)(_components.code,{children:"large"}),". Depending on the chosen size, the prop will apply styling to increase or decrease the amount of spacing within the component."]}),"\n",(0,jsx_runtime.jsx)(dist.Xz,{withSource:"none",children:(0,jsx_runtime.jsx)(dist.oG,{name:"Sizes",children:(0,jsx_runtime.jsxs)("div",{style:{display:"flex",flexDirection:"column",gap:"16px",height:"790px"},children:[(0,jsx_runtime.jsx)(components.A$,{label:"When would you like to collect your coffee?",size:"small"}),(0,jsx_runtime.jsx)(components.A$,{label:"When would you like to collect your coffee?"}),(0,jsx_runtime.jsx)(components.A$,{label:"When would you like to collect your coffee?",size:"large"})]})})}),"\n",(0,jsx_runtime.jsx)(_components.h4,{id:"sizes-code-example",children:"Sizes code example"}),"\n",(0,jsx_runtime.jsx)(_components.pre,{children:(0,jsx_runtime.jsx)(_components.code,{className:"language-jsx",children:'import * as React from "react";\nimport { IcDatePicker } from "@ukic/canary-react";\n\nconst DatePickers = () => (\n  <div style={{ display: "flex", flexDirection: "column", gap: "16px" }}>\n    <IcDatePicker label="When would you like to collect your coffee?" size="small" />\n    <IcDatePicker label="When would you like to collect your coffee?" />\n    <IcDatePicker label="When would you like to collect your coffee?" size="large" />\n  </div>\n);\n\nexport default DatePickers;\n'})}),"\n",(0,jsx_runtime.jsx)(_components.h3,{id:"max-width",children:"Max width"}),"\n",(0,jsx_runtime.jsxs)(_components.p,{children:["Set the size of the input field by using the ",(0,jsx_runtime.jsx)(_components.code,{children:"--input-width"})," CSS custom property. The picker will grow, but not exceed its maximum supported width."]}),"\n",(0,jsx_runtime.jsx)(dist.Xz,{withSource:"none",children:(0,jsx_runtime.jsx)(dist.oG,{name:"Max width",children:(0,jsx_runtime.jsxs)("div",{style:{display:"flex",flexDirection:"column",gap:"16px",height:"790px"},children:[(0,jsx_runtime.jsx)(components.A$,{style:{"--input-width":"500px"},label:"When would you like to collect your coffee?",size:"small"}),(0,jsx_runtime.jsx)(components.A$,{style:{"--input-width":"500px"},label:"When would you like to collect your coffee?"}),(0,jsx_runtime.jsx)(components.A$,{style:{"--input-width":"500px"},label:"When would you like to collect your coffee?",size:"large"})]})})}),"\n",(0,jsx_runtime.jsx)(_components.h4,{id:"max-width-code-example",children:"Max width code example"}),"\n",(0,jsx_runtime.jsx)(_components.pre,{children:(0,jsx_runtime.jsx)(_components.code,{className:"language-jsx",children:'import * as React from "react";\nimport { IcDatePicker } from "@ukic/canary-react";\n\nconst DatePickers = () => (\n  <div style={{ display: "flex", flexDirection: "column", gap: "16px" }}>\n    <IcDatePicker style={{ "--input-width": "500px" }} label="When would you like to collect your coffee?" size="small" />\n    <IcDatePicker style={{ "--input-width": "500px" }} label="When would you like to collect your coffee?" />\n    <IcDatePicker style={{ "--input-width": "500px" }} label="When would you like to collect your coffee?" size="large" />\n  </div>\n);\n\nexport default DatePickers;\n'})}),"\n",(0,jsx_runtime.jsx)(_components.h3,{id:"disabled",children:"Disabled"}),"\n",(0,jsx_runtime.jsxs)(_components.p,{children:["Disable the date picker and prevent user interaction by using the ",(0,jsx_runtime.jsx)(_components.code,{children:"disabled"})," prop."]}),"\n",(0,jsx_runtime.jsx)(dist.Xz,{withSource:"none",children:(0,jsx_runtime.jsx)(dist.oG,{name:"Disabled",height:"100px",children:(0,jsx_runtime.jsx)(components.A$,{label:"When would you like to collect your coffee?",disabled:!0})})}),"\n",(0,jsx_runtime.jsx)(_components.h4,{id:"disabled-code-example",children:"Disabled code example"}),"\n",(0,jsx_runtime.jsx)(_components.pre,{children:(0,jsx_runtime.jsx)(_components.code,{className:"language-jsx",children:'import * as React from "react";\nimport { IcDatePicker } from "@ukic/canary-react";\n\nconst DatePicker = () => (\n  <IcDatePicker label="When would you like to collect your coffee?" disabled />\n);\n\nexport default DatePicker;\n'})}),"\n",(0,jsx_runtime.jsx)(_components.h3,{id:"date-formats",children:"Date formats"}),"\n",(0,jsx_runtime.jsxs)(_components.p,{children:["The ",(0,jsx_runtime.jsx)(_components.code,{children:"dateFormat"})," prop determines how dates are displayed. The supported formats are ",(0,jsx_runtime.jsx)(_components.code,{children:"DD/MM/YYYY"}),", ",(0,jsx_runtime.jsx)(_components.code,{children:"MM/DD/YYYY"})," or ",(0,jsx_runtime.jsx)(_components.code,{children:"YYYY/MM/DD"}),".\nThe default format is ",(0,jsx_runtime.jsx)(_components.code,{children:"DD/MM/YYYY"}),"."]}),"\n",(0,jsx_runtime.jsx)(dist.Xz,{withSource:"none",children:(0,jsx_runtime.jsx)(dist.oG,{name:"Date formats",height:"760px",children:(0,jsx_runtime.jsxs)("div",{style:{display:"flex",flexDirection:"column",gap:"16px"},children:[(0,jsx_runtime.jsx)(components.A$,{label:"When would you like to collect your coffee?"}),(0,jsx_runtime.jsx)(components.A$,{label:"When would you like to collect your coffee?",dateFormat:"MM/DD/YYYY"}),(0,jsx_runtime.jsx)(components.A$,{label:"When would you like to collect your coffee?",dateFormat:"YYYY/MM/DD"})]})})}),"\n",(0,jsx_runtime.jsx)(_components.h4,{id:"date-formats-code-example",children:"Date formats code example"}),"\n",(0,jsx_runtime.jsx)(_components.pre,{children:(0,jsx_runtime.jsx)(_components.code,{className:"language-jsx",children:'import * as React from "react";\nimport { IcDatePicker } from "@ukic/canary-react";\n\nconst DatePickers = () => (\n  <div style={{ display: "flex", flexDirection: "column", gap: "16px" }}>\n    <IcDatePicker label="When would you like to collect your coffee?" />\n    <IcDatePicker label="When would you like to collect your coffee?" dateFormat="MM/DD/YYYY" />\n    <IcDatePicker label="When would you like to collect your coffee?" dateFormat="YYYY/MM/DD" />\n  </div>\n);\n\nexport default DatePickers;\n'})}),"\n",(0,jsx_runtime.jsx)(_components.h3,{id:"value",children:"Value"}),"\n",(0,jsx_runtime.jsxs)(_components.p,{children:["The ",(0,jsx_runtime.jsx)(_components.code,{children:"value"})," prop sets the date in the input field. The value can be in any format supported by the ",(0,jsx_runtime.jsx)(_components.code,{children:"dateFormat"})," prop, in ISO 8601 date string format (yyyy-mm-dd) or as a JavaScript Date object."]}),"\n",(0,jsx_runtime.jsx)(dist.Xz,{withSource:"none",children:(0,jsx_runtime.jsx)(dist.oG,{name:"Value",height:"540px",children:(0,jsx_runtime.jsx)(components.A$,{label:"When would you like to collect your coffee?",value:"01/01/2024"})})}),"\n",(0,jsx_runtime.jsx)(_components.h4,{id:"value-code-example",children:"Value code example"}),"\n",(0,jsx_runtime.jsx)(_components.pre,{children:(0,jsx_runtime.jsx)(_components.code,{className:"language-jsx",children:'import * as React from "react";\nimport { IcDatePicker } from "@ukic/canary-react";\n\nconst DatePicker = () => (\n  <IcDatePicker label="When would you like to collect your coffee?" value="01/01/2024" />\n);\n\nexport default DatePicker;\n'})}),"\n",(0,jsx_runtime.jsx)(_components.h3,{id:"open-at-date",children:"Open at date"}),"\n",(0,jsx_runtime.jsxs)(_components.p,{children:["If no ",(0,jsx_runtime.jsx)(_components.code,{children:"value"})," is set, the ",(0,jsx_runtime.jsx)(_components.code,{children:"openAtDate"})," prop can be used to specify the date in view when the calendar view is opened. If not set to a value, the calendar will default to showing the current date."]}),"\n",(0,jsx_runtime.jsxs)(_components.p,{children:["The supported formats are the same as for the ",(0,jsx_runtime.jsx)(_components.code,{children:"value"})," prop."]}),"\n",(0,jsx_runtime.jsx)(dist.Xz,{withSource:"none",children:(0,jsx_runtime.jsx)(dist.oG,{name:"Open at date",height:"540px",children:(0,jsx_runtime.jsx)(components.A$,{label:"When would you like to collect your coffee?",helperText:"The calendar will open showing 25th December 2024, if no date selected",openAtDate:"2024-12-25"})})}),"\n",(0,jsx_runtime.jsx)(_components.h4,{id:"open-at-date-code-example",children:"Open at date code example"}),"\n",(0,jsx_runtime.jsx)(_components.pre,{children:(0,jsx_runtime.jsx)(_components.code,{className:"language-jsx",children:'import * as React from "react";\nimport { IcDatePicker } from "@ukic/canary-react";\n\nconst DatePicker = () => (\n  <IcDatePicker \n    label="When would you like to collect your coffee?"\n    helperText="The calendar will open showing 25th December 2024, if no date selected" \n    openAtDate="2024-12-25" \n  />\n);\n\nexport default DatePicker;\n'})}),"\n",(0,jsx_runtime.jsx)(_components.h3,{id:"start-of-week",children:"Start of week"}),"\n",(0,jsx_runtime.jsxs)(_components.p,{children:["The first day of the week can be changed by setting the ",(0,jsx_runtime.jsx)(_components.code,{children:"startOfWeek"})," prop. This is a numeric value where 0 = Sunday, 1 = Monday, etc up to 6 = Saturday."]}),"\n",(0,jsx_runtime.jsx)(dist.Xz,{withSource:"none",children:(0,jsx_runtime.jsx)(dist.oG,{name:"Start of week",height:"540px",children:(0,jsx_runtime.jsx)(components.A$,{label:"When would you like to collect your coffee?",startOfWeek:"0"})})}),"\n",(0,jsx_runtime.jsx)(_components.h4,{id:"start-of-week-code-example",children:"Start of week code example"}),"\n",(0,jsx_runtime.jsx)(_components.pre,{children:(0,jsx_runtime.jsx)(_components.code,{className:"language-jsx",children:'import * as React from "react";\nimport { IcDatePicker } from "@ukic/canary-react";\n\nconst DatePicker = () => (\n  <IcDatePicker label="When would you like to collect your coffee?" startOfWeek="0" />\n);\n\nexport default DatePicker;\n'})}),"\n",(0,jsx_runtime.jsx)(_components.h3,{id:"disable-days-of-week",children:"Disable days of week"}),"\n",(0,jsx_runtime.jsxs)(_components.p,{children:["Specific days of the week can be disabled from selection by setting the ",(0,jsx_runtime.jsx)(_components.code,{children:"disableDays"})," prop. The value can be set as an array of numeric values where where 0 = Sunday, 1 = Monday, etc up to 6 = Saturday."]}),"\n","\n",(0,jsx_runtime.jsx)(dist.Xz,{withSource:"none",children:(0,jsx_runtime.jsx)(dist.oG,{name:"Disable days of week",height:"540px",children:(0,jsx_runtime.jsx)(components.A$,{label:"When would you like to collect your coffee?",disableDays:disabledDaysOfWeek})})}),"\n",(0,jsx_runtime.jsx)(_components.h4,{id:"disable-days-of-week-code-example",children:"Disable days of week code example"}),"\n",(0,jsx_runtime.jsx)(_components.pre,{children:(0,jsx_runtime.jsx)(_components.code,{className:"language-jsx",children:'import * as React from "react";\nimport { IcDatePicker } from "@ukic/canary-react";\n\nconst disabledDaysOfWeek = [0, 6]\n\nconst DatePicker = () => (\n  <IcDatePicker label="When would you like to collect your coffee?" disableDays={disabledDaysOfWeek} />\n);\n\nexport default DatePicker;\n'})}),"\n",(0,jsx_runtime.jsx)(_components.h3,{id:"max--min",children:"Max & Min"}),"\n",(0,jsx_runtime.jsxs)(_components.p,{children:["The ",(0,jsx_runtime.jsx)(_components.code,{children:"max"})," and ",(0,jsx_runtime.jsx)(_components.code,{children:"min"})," props can be used to limit the range of dates available for selection. Values can be in any format supported by the ",(0,jsx_runtime.jsx)(_components.code,{children:"dateFormat"})," prop, in ISO 8601 date string format (yyyy-mm-dd) or as a JavaScript Date object."]}),"\n",(0,jsx_runtime.jsx)(dist.Xz,{withSource:"none",children:(0,jsx_runtime.jsx)(dist.oG,{name:"Max & Min",height:"500px",children:(0,jsx_runtime.jsx)(components.A$,{label:"When would you like to collect your coffee?",helperText:"Choose a date between the 1st and 31st of July",min:"2024-07-01",max:"2024-07-31",showPickerTodayButton:"false"})})}),"\n",(0,jsx_runtime.jsx)(_components.h4,{id:"max--min-code-example",children:"Max & Min code example"}),"\n",(0,jsx_runtime.jsx)(_components.pre,{children:(0,jsx_runtime.jsx)(_components.code,{className:"language-jsx",children:'import * as React from "react";\nimport { IcDatePicker } from "@ukic/canary-react";\n\nconst DatePicker = () => (\n  <IcDatePicker \n    label="When would you like to collect your coffee?" \n    helperText="Choose a date between the 1st and 31st of July"\n    min="2024-07-01"\n    max="2024-07-31"\n    showPickerTodayButton="false"\n  />\n);\n\nexport default DatePicker;\n'})}),"\n",(0,jsx_runtime.jsx)(_components.h3,{id:"disable-dates-in-past",children:"Disable dates in past"}),"\n",(0,jsx_runtime.jsxs)(_components.p,{children:["Dates before today can be disabled with the ",(0,jsx_runtime.jsx)(_components.code,{children:"disablePast"})," prop."]}),"\n",(0,jsx_runtime.jsx)(dist.Xz,{withSource:"none",children:(0,jsx_runtime.jsx)(dist.oG,{name:"Disable dates in past",height:"540px",children:(0,jsx_runtime.jsx)(components.A$,{label:"When would you like to collect your coffee?",disablePast:!0})})}),"\n",(0,jsx_runtime.jsx)(_components.h4,{id:"disable-dates-in-past-code-example",children:"Disable dates in past code example"}),"\n",(0,jsx_runtime.jsx)(_components.pre,{children:(0,jsx_runtime.jsx)(_components.code,{className:"language-jsx",children:'import * as React from "react";\nimport { IcDatePicker } from "@ukic/canary-react";\n\nconst DatePicker = () => (\n  <IcDatePicker label="When would you like to collect your coffee?" disablePast />\n);\n\nexport default DatePicker;\n'})}),"\n",(0,jsx_runtime.jsx)(_components.h3,{id:"disable-dates-in-future",children:"Disable dates in future"}),"\n",(0,jsx_runtime.jsxs)(_components.p,{children:["Dates after today can be disabled with the ",(0,jsx_runtime.jsx)(_components.code,{children:"disableFuture"})," prop."]}),"\n",(0,jsx_runtime.jsx)(dist.Xz,{withSource:"none",children:(0,jsx_runtime.jsx)(dist.oG,{name:"Disable dates in future",height:"540px",children:(0,jsx_runtime.jsx)(components.A$,{label:"When would you like to collect your coffee?",disableFuture:!0})})}),"\n",(0,jsx_runtime.jsx)(_components.h4,{id:"disable-dates-in-future-code-example",children:"Disable dates in future code example"}),"\n",(0,jsx_runtime.jsx)(_components.pre,{children:(0,jsx_runtime.jsx)(_components.code,{className:"language-jsx",children:'import * as React from "react";\nimport { IcDatePicker } from "@ukic/canary-react";\n\nconst DatePicker = () => (\n  <IcDatePicker label="When would you like to collect your coffee?" disableFuture />\n);\n\nexport default DatePicker;\n'})}),"\n",(0,jsx_runtime.jsx)(_components.h3,{id:"days-outside-month-hidden",children:"Days outside month hidden"}),"\n",(0,jsx_runtime.jsxs)(_components.p,{children:["Days outside of the current month in view can be hidden by setting the ",(0,jsx_runtime.jsx)(_components.code,{children:"showDaysOutsideMonth"})," prop to ",(0,jsx_runtime.jsx)(_components.code,{children:"false"}),"."]}),"\n",(0,jsx_runtime.jsx)(dist.Xz,{withSource:"none",children:(0,jsx_runtime.jsx)(dist.oG,{name:"Days outside month hidden",height:"540px",children:(0,jsx_runtime.jsx)(components.A$,{label:"When would you like to collect your coffee?",showDaysOutsideMonth:"false"})})}),"\n",(0,jsx_runtime.jsx)(_components.h4,{id:"days-outside-month-hidden-code-example",children:"Days outside month hidden code example"}),"\n",(0,jsx_runtime.jsx)(_components.pre,{children:(0,jsx_runtime.jsx)(_components.code,{className:"language-jsx",children:'import * as React from "react";\nimport { IcDatePicker } from "@ukic/canary-react";\n\nconst DatePicker = () => (\n  <IcDatePicker label="When would you like to collect your coffee?" showDaysOutsideMonth="false" />\n);\n\nexport default DatePicker;\n'})}),"\n",(0,jsx_runtime.jsx)(_components.h3,{id:"today--clear-buttons-hidden",children:"Today & clear buttons hidden"}),"\n",(0,jsx_runtime.jsxs)(_components.p,{children:['The "Go to today" and "Clear" buttons can be hidden from the calendar view by setting the ',(0,jsx_runtime.jsx)(_components.code,{children:"showPickerTodayButton"})," and ",(0,jsx_runtime.jsx)(_components.code,{children:"showPickerClearButton"})," props to ",(0,jsx_runtime.jsx)(_components.code,{children:"false"}),"."]}),"\n",(0,jsx_runtime.jsx)(dist.Xz,{withSource:"none",children:(0,jsx_runtime.jsx)(dist.oG,{name:"Today & clear buttons hidden",height:"480px",children:(0,jsx_runtime.jsx)(components.A$,{label:"When would you like to collect your coffee?",showPickerTodayButton:"false",showPickerClearButton:"false"})})}),"\n",(0,jsx_runtime.jsx)(_components.h4,{id:"today--clear-buttons-hidden-code-example",children:"Today & clear buttons hidden code example"}),"\n",(0,jsx_runtime.jsx)(_components.pre,{children:(0,jsx_runtime.jsx)(_components.code,{className:"language-jsx",children:'import * as React from "react";\nimport { IcDatePicker } from "@ukic/canary-react";\n\nconst DatePicker = () => (\n  <IcDatePicker \n    label="When would you like to collect your coffee?" \n    showPickerTodayButton="false"\n    showPickerClearButton="false"\n  />\n);\n\nexport default DatePicker;\n'})}),"\n",(0,jsx_runtime.jsx)(_components.h3,{id:"javascript-dates",children:"JavaScript dates"}),"\n",(0,jsx_runtime.jsxs)(_components.p,{children:["Any prop that accepts a date value can be set to a Javascript Date object. The following example sets the ",(0,jsx_runtime.jsx)(_components.code,{children:"value"}),", ",(0,jsx_runtime.jsx)(_components.code,{children:"max"})," and ",(0,jsx_runtime.jsx)(_components.code,{children:"min"})," props."]}),"\n",(0,jsx_runtime.jsx)(dist.Xz,{withSource:"none",children:(0,jsx_runtime.jsx)(dist.oG,{name:"JavaScript dates",height:"500px",children:(0,jsx_runtime.jsx)(components.A$,{label:"When would you like to collect your coffee?",min:new Date(2024,6,1),max:new Date(2024,6,31),value:new Date(2024,6,15),helperText:"Choose a date between the 1st and 31st of July",showPickerTodayButton:"false"})})}),"\n",(0,jsx_runtime.jsx)(_components.h4,{id:"javascript-dates-code-example",children:"JavaScript dates code example"}),"\n",(0,jsx_runtime.jsx)(_components.pre,{children:(0,jsx_runtime.jsx)(_components.code,{className:"language-jsx",children:'import * as React from "react";\nimport { IcDatePicker } from "@ukic/canary-react";\n\nconst DatePicker = () => (\n  <IcDatePicker \n    label="When would you like to collect your coffee?" \n    min={new Date(2024, 6, 1)}\n    max={new Date(2024, 6, 31)}\n    value={new Date(2024, 6, 15)}\n    helperText="Choose a date between the 1st and 31st of July"\n    showPickerTodayButton="false"\n  />\n);\n\nexport default DatePicker;\n'})}),"\n",(0,jsx_runtime.jsx)(_components.h3,{id:"icchange-event",children:"IcChange event"}),"\n",(0,jsx_runtime.jsxs)(_components.p,{children:["The ",(0,jsx_runtime.jsx)(_components.code,{children:"IcChange"})," event is emitted by the date picker when the selected date changes."]}),"\n","\n",(0,jsx_runtime.jsx)(dist.Xz,{withSource:"none",children:(0,jsx_runtime.jsx)(dist.oG,{name:"IcChange event",height:"540px",children:(0,jsx_runtime.jsx)(DatePickerWithIcChange,{})})}),"\n",(0,jsx_runtime.jsx)(_components.h4,{id:"icchange-event-code-example",children:"IcChange event code example"}),"\n",(0,jsx_runtime.jsx)(_components.pre,{children:(0,jsx_runtime.jsx)(_components.code,{className:"language-jsx",children:'import * as React from "react";\nimport { IcDatePicker } from "@ukic/canary-react";\n\nconst DatePickerWithIcChange = () => {\n  const [selectedDate, setSelectedDate] = React.useState();\n  const [value, setValue] = useState();\n  const dateChangedHandler = (event) => {\n    setValue(event.detail.value);\n    setSelectedDate(event.detail.value);\n  }\n  return (\n    <div style={{ display: "flex", flexDirection: "column", gap: "50px" }}>\n      <IcDatePicker \n        label="When would you like to collect your coffee?" \n        onIcChange={dateChangedHandler}\n        value={value}\n      /> \n      <span>\n        {`Selected date: ${selectedDate}`}\n      </span>  \n    </div>\n  );\n};\n\nexport default DatePickerWithIcChange;\n'})})]})}const defaultStory=()=>(0,jsx_runtime.jsx)(components.A$,{label:"When would you like to collect your coffee?"});defaultStory.storyName="Default",defaultStory.parameters={storySource:{source:'<IcDatePicker label="When would you like to collect your coffee?" />'}};const sizes=()=>(0,jsx_runtime.jsxs)("div",{style:{display:"flex",flexDirection:"column",gap:"16px",height:"790px"},children:[(0,jsx_runtime.jsx)(components.A$,{label:"When would you like to collect your coffee?",size:"small"}),(0,jsx_runtime.jsx)(components.A$,{label:"When would you like to collect your coffee?"}),(0,jsx_runtime.jsx)(components.A$,{label:"When would you like to collect your coffee?",size:"large"})]});sizes.storyName="Sizes",sizes.parameters={storySource:{source:'<div style={{\n  display: "flex",\n  flexDirection: "column",\n  gap: "16px",\n  height: "790px"\n}}><IcDatePicker label="When would you like to collect your coffee?" size="small" /><IcDatePicker label="When would you like to collect your coffee?" /><IcDatePicker label="When would you like to collect your coffee?" size="large" /></div>'}};const maxWidth=()=>(0,jsx_runtime.jsxs)("div",{style:{display:"flex",flexDirection:"column",gap:"16px",height:"790px"},children:[(0,jsx_runtime.jsx)(components.A$,{style:{"--input-width":"500px"},label:"When would you like to collect your coffee?",size:"small"}),(0,jsx_runtime.jsx)(components.A$,{style:{"--input-width":"500px"},label:"When would you like to collect your coffee?"}),(0,jsx_runtime.jsx)(components.A$,{style:{"--input-width":"500px"},label:"When would you like to collect your coffee?",size:"large"})]});maxWidth.storyName="Max width",maxWidth.parameters={storySource:{source:'<div style={{\n  display: "flex",\n  flexDirection: "column",\n  gap: "16px",\n  height: "790px"\n}}><IcDatePicker style={{\n    "--input-width": "500px"\n  }} label="When would you like to collect your coffee?" size="small" /><IcDatePicker style={{\n    "--input-width": "500px"\n  }} label="When would you like to collect your coffee?" /><IcDatePicker style={{\n    "--input-width": "500px"\n  }} label="When would you like to collect your coffee?" size="large" /></div>'}};const disabled=()=>(0,jsx_runtime.jsx)(components.A$,{label:"When would you like to collect your coffee?",disabled:!0});disabled.storyName="Disabled",disabled.parameters={storySource:{source:'<IcDatePicker label="When would you like to collect your coffee?" disabled />'}};const dateFormats=()=>(0,jsx_runtime.jsxs)("div",{style:{display:"flex",flexDirection:"column",gap:"16px"},children:[(0,jsx_runtime.jsx)(components.A$,{label:"When would you like to collect your coffee?"}),(0,jsx_runtime.jsx)(components.A$,{label:"When would you like to collect your coffee?",dateFormat:"MM/DD/YYYY"}),(0,jsx_runtime.jsx)(components.A$,{label:"When would you like to collect your coffee?",dateFormat:"YYYY/MM/DD"})]});dateFormats.storyName="Date formats",dateFormats.parameters={storySource:{source:'<div style={{\n  display: "flex",\n  flexDirection: "column",\n  gap: "16px"\n}}><IcDatePicker label="When would you like to collect your coffee?" /><IcDatePicker label="When would you like to collect your coffee?" dateFormat="MM/DD/YYYY" /><IcDatePicker label="When would you like to collect your coffee?" dateFormat="YYYY/MM/DD" /></div>'}};const value=()=>(0,jsx_runtime.jsx)(components.A$,{label:"When would you like to collect your coffee?",value:"01/01/2024"});value.storyName="Value",value.parameters={storySource:{source:'<IcDatePicker label="When would you like to collect your coffee?" value="01/01/2024" />'}};const openAtDate=()=>(0,jsx_runtime.jsx)(components.A$,{label:"When would you like to collect your coffee?",helperText:"The calendar will open showing 25th December 2024, if no date selected",openAtDate:"2024-12-25"});openAtDate.storyName="Open at date",openAtDate.parameters={storySource:{source:'<IcDatePicker label="When would you like to collect your coffee?" helperText="The calendar will open showing 25th December 2024, if no date selected" openAtDate="2024-12-25" />'}};const startOfWeek=()=>(0,jsx_runtime.jsx)(components.A$,{label:"When would you like to collect your coffee?",startOfWeek:"0"});startOfWeek.storyName="Start of week",startOfWeek.parameters={storySource:{source:'<IcDatePicker label="When would you like to collect your coffee?" startOfWeek="0" />'}};const disableDaysOfWeek=()=>(0,jsx_runtime.jsx)(components.A$,{label:"When would you like to collect your coffee?",disableDays:disabledDaysOfWeek});disableDaysOfWeek.storyName="Disable days of week",disableDaysOfWeek.parameters={storySource:{source:'<IcDatePicker label="When would you like to collect your coffee?" disableDays={disabledDaysOfWeek} />'}};const maxMin=()=>(0,jsx_runtime.jsx)(components.A$,{label:"When would you like to collect your coffee?",helperText:"Choose a date between the 1st and 31st of July",min:"2024-07-01",max:"2024-07-31",showPickerTodayButton:"false"});maxMin.storyName="Max & Min",maxMin.parameters={storySource:{source:'<IcDatePicker label="When would you like to collect your coffee?" helperText="Choose a date between the 1st and 31st of July" min="2024-07-01" max="2024-07-31" showPickerTodayButton="false" />'}};const disableDatesInPast=()=>(0,jsx_runtime.jsx)(components.A$,{label:"When would you like to collect your coffee?",disablePast:!0});disableDatesInPast.storyName="Disable dates in past",disableDatesInPast.parameters={storySource:{source:'<IcDatePicker label="When would you like to collect your coffee?" disablePast />'}};const disableDatesInFuture=()=>(0,jsx_runtime.jsx)(components.A$,{label:"When would you like to collect your coffee?",disableFuture:!0});disableDatesInFuture.storyName="Disable dates in future",disableDatesInFuture.parameters={storySource:{source:'<IcDatePicker label="When would you like to collect your coffee?" disableFuture />'}};const daysOutsideMonthHidden=()=>(0,jsx_runtime.jsx)(components.A$,{label:"When would you like to collect your coffee?",showDaysOutsideMonth:"false"});daysOutsideMonthHidden.storyName="Days outside month hidden",daysOutsideMonthHidden.parameters={storySource:{source:'<IcDatePicker label="When would you like to collect your coffee?" showDaysOutsideMonth="false" />'}};const todayClearButtonsHidden=()=>(0,jsx_runtime.jsx)(components.A$,{label:"When would you like to collect your coffee?",showPickerTodayButton:"false",showPickerClearButton:"false"});todayClearButtonsHidden.storyName="Today & clear buttons hidden",todayClearButtonsHidden.parameters={storySource:{source:'<IcDatePicker label="When would you like to collect your coffee?" showPickerTodayButton="false" showPickerClearButton="false" />'}};const javaScriptDates=()=>(0,jsx_runtime.jsx)(components.A$,{label:"When would you like to collect your coffee?",min:new Date(2024,6,1),max:new Date(2024,6,31),value:new Date(2024,6,15),helperText:"Choose a date between the 1st and 31st of July",showPickerTodayButton:"false"});javaScriptDates.storyName="JavaScript dates",javaScriptDates.parameters={storySource:{source:'<IcDatePicker label="When would you like to collect your coffee?" min={new Date(2024, 6, 1)} max={new Date(2024, 6, 31)} value={new Date(2024, 6, 15)} helperText="Choose a date between the 1st and 31st of July" showPickerTodayButton="false" />'}};const icChangeEvent=()=>(0,jsx_runtime.jsx)(DatePickerWithIcChange,{});icChangeEvent.storyName="IcChange event",icChangeEvent.parameters={storySource:{source:"<DatePickerWithIcChange />"}};const componentMeta={title:"React Components/Date Picker",parameters:{componentAPI:{data:readme_namespaceObject}},component:components.A$,tags:["stories-mdx"],includeStories:["defaultStory","sizes","maxWidth","disabled","dateFormats","value","openAtDate","startOfWeek","disableDaysOfWeek","maxMin","disableDatesInPast","disableDatesInFuture","daysOutsideMonthHidden","todayClearButtonsHidden","javaScriptDates","icChangeEvent"]};componentMeta.parameters=componentMeta.parameters||{},componentMeta.parameters.docs={...componentMeta.parameters.docs||{},page:function MDXContent(props={}){const{wrapper:MDXLayout}=Object.assign({},(0,lib.ah)(),props.components);return MDXLayout?(0,jsx_runtime.jsx)(MDXLayout,{...props,children:(0,jsx_runtime.jsx)(_createMdxContent,{...props})}):_createMdxContent(props)}};const ic_date_picker_stories=componentMeta,__namedExportsOrder=["disabledDaysOfWeek","DatePickerWithIcChange","defaultStory","sizes","maxWidth","disabled","dateFormats","value","openAtDate","startOfWeek","disableDaysOfWeek","maxMin","disableDatesInPast","disableDatesInFuture","daysOutsideMonthHidden","todayClearButtonsHidden","javaScriptDates","icChangeEvent"]},"./node_modules/react/cjs/react-jsx-runtime.production.min.js":(__unused_webpack_module,exports,__webpack_require__)=>{var f=__webpack_require__("./node_modules/react/index.js"),g=60103;if(exports.Fragment=60107,"function"==typeof Symbol&&Symbol.for){var h=Symbol.for;g=h("react.element"),exports.Fragment=h("react.fragment")}var m=f.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,n=Object.prototype.hasOwnProperty,p={key:!0,ref:!0,__self:!0,__source:!0};function q(c,a,k){var b,d={},e=null,l=null;for(b in void 0!==k&&(e=""+k),void 0!==a.key&&(e=""+a.key),void 0!==a.ref&&(l=a.ref),a)n.call(a,b)&&!p.hasOwnProperty(b)&&(d[b]=a[b]);if(c&&c.defaultProps)for(b in a=c.defaultProps)void 0===d[b]&&(d[b]=a[b]);return{$$typeof:g,type:c,key:e,ref:l,props:d,_owner:m.current}}exports.jsx=q,exports.jsxs=q},"./node_modules/react/jsx-runtime.js":(module,__unused_webpack_exports,__webpack_require__)=>{module.exports=__webpack_require__("./node_modules/react/cjs/react-jsx-runtime.production.min.js")}}]);