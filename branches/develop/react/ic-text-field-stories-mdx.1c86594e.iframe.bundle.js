/*! For license information please see ic-text-field-stories-mdx.1c86594e.iframe.bundle.js.LICENSE.txt */
"use strict";(self.webpackChunk_ukic_react=self.webpackChunk_ukic_react||[]).push([[9388],{"./node_modules/@mdx-js/react/lib/index.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{BN:()=>MDXContext,RP:()=>useMDXComponents,gz:()=>withMDXComponents,xA:()=>MDXProvider});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/react/index.js");const MDXContext=react__WEBPACK_IMPORTED_MODULE_0__.createContext({});function withMDXComponents(Component){return function boundMDXComponent(props){const allComponents=useMDXComponents(props.components);return react__WEBPACK_IMPORTED_MODULE_0__.createElement(Component,{...props,allComponents})}}function useMDXComponents(components){const contextComponents=react__WEBPACK_IMPORTED_MODULE_0__.useContext(MDXContext);return react__WEBPACK_IMPORTED_MODULE_0__.useMemo((()=>"function"==typeof components?components(contextComponents):{...contextComponents,...components}),[contextComponents,components])}const emptyObject={};function MDXProvider({components,children,disableParentContext}){let allComponents;return allComponents=disableParentContext?"function"==typeof components?components({}):components||emptyObject:useMDXComponents(components),react__WEBPACK_IMPORTED_MODULE_0__.createElement(MDXContext.Provider,{value:allComponents},children)}},"./node_modules/@storybook/addon-docs/dist/index.mjs":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{Hl:()=>_storybook_blocks__WEBPACK_IMPORTED_MODULE_1__.Hl,VY:()=>_storybook_blocks__WEBPACK_IMPORTED_MODULE_1__.VY,W8:()=>_storybook_blocks__WEBPACK_IMPORTED_MODULE_1__.W8,gG:()=>_storybook_blocks__WEBPACK_IMPORTED_MODULE_1__.gG});__webpack_require__("./node_modules/@storybook/addon-docs/dist/chunk-HLWAVYOI.mjs");var _storybook_blocks__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/@storybook/blocks/dist/index.mjs")},"./src/stories/ic-text-field.stories.mdx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{ControlledExample:()=>ControlledExample,SlottedIcon:()=>SlottedIcon,Uncontrolled:()=>Uncontrolled,__namedExportsOrder:()=>__namedExportsOrder,controlled:()=>controlled,default:()=>ic_text_field_stories,defaultArgs:()=>defaultArgs,defaultStory:()=>defaultStory,disabled:()=>disabled,fullWidth:()=>fullWidth,helperText:()=>helperText,maxLength:()=>maxLength,maxLengthMessage:()=>maxLengthMessage,maximumAndMinimumCharacters:()=>maximumAndMinimumCharacters,minAndMax:()=>minAndMax,placeholderAndRequired:()=>placeholderAndRequired,playground:()=>playground,readOnly:()=>readOnly,textAreaWithResize:()=>textAreaWithResize,uncontrolled:()=>uncontrolled,validation:()=>validation,withIcon:()=>withIcon,withValue:()=>withValue});var react=__webpack_require__("./node_modules/react/index.js"),lib=__webpack_require__("./node_modules/@mdx-js/react/lib/index.js"),dist=__webpack_require__("./node_modules/@storybook/addon-docs/dist/index.mjs"),components=__webpack_require__("./src/components.ts"),slottedSVG=__webpack_require__("./src/react-component-lib/slottedSVG.tsx");const readme_namespaceObject='# ic-textfield\n\n\n\n\x3c!-- Auto Generated Below --\x3e\n\n\n## Properties\n\n| Property             | Attribute            | Description                                                                                                                                                                        | Type| Default                               |\n| -------------------- | -------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- || ------------------------------------- |\n| `autoFocus`          | `auto-focus`         | If `true`, the form control will have input focus when the page loads.                                                                                                             | `boolean`| `false`                               |\n| `autocapitalize`     | `autocapitalize`     | The automatic capitalisation of the text value as it is entered/edited by the user. Available options: "off", "none", "on", "sentences", "words", "characters".                    | `string`                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    | `"off"`                               |\n| `autocomplete`       | `autocomplete`       | The state of autocompletion the browser can apply on the text value.                                                                                                               | `"name" \\| "on" \\| "off" \\| "honorific-prefix" \\| "given-name" \\| "additional-name" \\| "family-name" \\| "honorific-suffix" \\| "nickname" \\| "email" \\| "username" \\| "new-password" \\| "current-password" \\| "one-time-code" \\| "organization-title" \\| "organization" \\| "street-address" \\| "address-line1" \\| "address-line2" \\| "address-line3" \\| "address-level4" \\| "address-level3" \\| "address-level2" \\| "address-level1" \\| "country" \\| "country-name" \\| "postal-code" \\| "cc-name" \\| "cc-given-name" \\| "cc-additional-name" \\| "cc-family-name" \\| "cc-number" \\| "cc-exp" \\| "cc-exp-month" \\| "cc-exp-year" \\| "cc-csc" \\| "cc-type" \\| "transaction-currency" \\| "transaction-amount" \\| "language" \\| "bday" \\| "bday-day" \\| "bday-month" \\| "bday-year" \\| "sex" \\| "tel" \\| "tel-country-code" \\| "tel-national" \\| "tel-area-code" \\| "tel-local" \\| "tel-extension" \\| "impp" \\| "url" \\| "photo"` | `"off"`                               |\n| `autocorrect`        | `autocorrect`        | The state of autocorrection the browser can apply when the user is entering/editing the text value.                                                                                | `"off" \\| "on"`| `"off"`                               |\n| `debounce`           | `debounce`           | The amount of time, in milliseconds, to wait to trigger the `icChange` event after each keystroke.                                                                                 | `number`| `0`                                   |\n| `disabled`           | `disabled`           | If `true`, the disabled state will be set.                                                                                                                                         | `boolean`| `false`                               |\n| `fullWidth`          | `full-width`         | Specify whether the text field fills the full width of the container. If `true`, this overrides the --input-width CSS variable.                                                    | `boolean`| `false`                               |\n| `helperText`         | `helper-text`        | The helper text that will be displayed for additional field guidance.                                                                                                              | `string`| `""`                                  |\n| `hideLabel`          | `hide-label`         | If `true`, the label will be hidden and the required label value will be applied as an aria-label.                                                                                 | `boolean`| `false`                               |\n| `inputId`            | `input-id`           | The ID for the input.                                                                                                                                                              | `string`| ``ic-text-field-input-${inputIds++}`` |\n| `inputmode`          | `inputmode`          | A hint to the browser for which keyboard to display. Possible values: `"none"`, `"text"`, `"tel"`, `"url"`, `"email"`, `"numeric"`, `"decimal"`, and `"search"`.                   | `"decimal" \\| "email" \\| "none" \\| "numeric" \\| "search" \\| "tel" \\| "text" \\| "url"`| `"text"`                              |\n| `label` _(required)_ | `label`              | The label for the input.                                                                                                                                                           | `string`| `undefined`                           |\n| `max`                | `max`                | The maximum number that can be accepted as a value, when `type` is `number` and `rows` is `1`. (NOTE: Ensure to include visual indication of max value in `helperText` or `label`) | `number \\| string`| `undefined`                           |\n| `maxCharacters`      | `max-characters`     | The maximum number of characters that can be entered in the field. Will display an error if too many characters are entered.                                                       | `number`| `0`                                   |\n| `maxLength`          | `max-length`         | The count of characters in the field. Will display a warning if the bound is reached.                                                                                              | `number`| `0`                                   |\n| `maxLengthMessage`   | `max-length-message` | The text to display as the validation message when the maximum length is exceeded.                                                                                                 | `string`| `"Maximum length exceeded"`           |\n| `min`                | `min`                | The minimum number that can be accepted as a value, when `type` is `number` and `rows` is `1`. (NOTE: Ensure to include visual indication of min value in `helperText` or `label`) | `number \\| string`| `undefined`                           |\n| `minCharacters`      | `min-characters`     | The minimum number of characters that can be entered in the field.                                                                                                                 | `number`| `0`                                   |\n| `name`               | `name`               | The name of the control, which is submitted with the form data.                                                                                                                    | `string`| `this.inputId`                        |\n| `placeholder`        | `placeholder`        | The placeholder value to be displayed.                                                                                                                                             | `string`| `""`                                  |\n| `readonly`           | `readonly`           | If `true`, the read only state will be set.                                                                                                                                        | `boolean`| `false`                               |\n| `required`           | `required`           | If `true`, the input will require a value.                                                                                                                                         | `boolean`| `false`                               |\n| `resize`             | `resize`             | If `true`, the multiline text area will be resizeable.                                                                                                                             | `boolean`| `false`                               |\n| `rows`               | `rows`               | The number of rows to transform the text field into a text area with a specific height.                                                                                            | `number`| `1`                                   |\n| `size`               | `size`               | The size of the text field component.                                                                                                                                              | `"default" \\| "small"`| `"default"`                           |\n| `small`              | `small`              | <span style="color:red">**[DEPRECATED]**</span> This prop should not be used anymore. Set prop `size` to "small" instead.<br/><br/>                                                | `boolean`| `false`                               |\n| `spellcheck`         | `spellcheck`         | If `true`, the value of the text field will have its spelling and grammar checked.                                                                                                 | `boolean`| `false`                               |\n| `type`               | `type`               | The type of control to display. The default type is text.                                                                                                                          | `"email" \\| "number" \\| "password" \\| "search" \\| "tel" \\| "text" \\| "url"`                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 | `"text"`                              |\n| `validationInline`   | `validation-inline`  | If `true`, the icon in input control will be displayed - only applies when validationStatus =\'success\'.                                                                            | `boolean`| `false`                               |\n| `validationStatus`   | `validation-status`  | The validation state - e.g. \'error\' \\| \'warning\' \\| \'success\'.                                                                                                                     | `"" \\| "error" \\| "success" \\| "warning"`| `""`                                  |\n| `validationText`     | `validation-text`    | The validation state - e.g. \'error\' \\| \'warning\' \\| \'success\'.                                                                                                                     | `string`| `""`                                  |\n| `value`              | `value`              | The value of the text field.                                                                                                                                                       | `string`| `""`                                  |\n\n\n## Events\n\n| Event       | Description                             | Type                                     |\n| ----------- | --------------------------------------- | ---------------------------------------- |\n| `icBlur`    | Emitted when input loses focus.         | `CustomEvent<IcValueEventDetail>`        |\n| `icChange`  | Emitted when the value has changed.     | `CustomEvent<IcValueEventDetail>`        |\n| `icFocus`   | Emitted when input gains focus.         | `CustomEvent<IcValueEventDetail>`        |\n| `icInput`   | Emitted when a keyboard input occurred. | `CustomEvent<IcValueEventDetail>`        |\n| `icKeydown` | Emitted when a keydown event occurred.  | `CustomEvent<{ event: KeyboardEvent; }>` |\n\n\n## Methods\n\n### `setFocus() => Promise<void>`\n\nSets focus on the native `input`.\n\n#### Returns\n\nType: `Promise<void>`\n\n\n\n\n## Slots\n\n| Slot     | Description                                           |\n| -------- | ----------------------------------------------------- |\n| `"icon"` | Content will be placed to the left of the text input. |\n\n\n## CSS Custom Properties\n\n| Name            | Description              |\n| --------------- | ------------------------ |\n| `--input-width` | Width of the input field |\n\n\n## Dependencies\n\n### Used by\n\n - [ic-search-bar](../ic-search-bar)\n\n### Depends on\n\n- [ic-input-container](../ic-input-container)\n- [ic-input-label](../ic-input-label)\n- [ic-input-component-container](../ic-input-component-container)\n- [ic-input-validation](../ic-input-validation)\n- [ic-typography](../ic-typography)\n\n### Graph\n```mermaid\ngraph TD;\n  ic-text-field --\x3e ic-input-container\n  ic-text-field --\x3e ic-input-label\n  ic-text-field --\x3e ic-input-component-container\n  ic-text-field --\x3e ic-input-validation\n  ic-text-field --\x3e ic-typography\n  ic-input-label --\x3e ic-typography\n  ic-input-validation --\x3e ic-typography\n  ic-search-bar --\x3e ic-text-field\n  style ic-text-field fill:#f9f,stroke:#333,stroke-width:4px\n```\n\n----------------------------------------------\n\n\n';var jsx_runtime=__webpack_require__("./node_modules/react/jsx-runtime.js");const SlottedIcon=()=>{const _components=Object.assign({path:"path"},(0,lib.RP)());return(0,jsx_runtime.jsxs)(slottedSVG.k,{slot:"icon",xmlns:"http://www.w3.org/2000/svg",height:"24px",viewBox:"0 0 24 24",width:"24px",fill:"#000000",children:[(0,jsx_runtime.jsx)(_components.path,{d:"M0 0h24v24H0z",fill:"none"}),(0,jsx_runtime.jsx)(_components.path,{d:"M17 3H7c-1.1 0-1.99.9-1.99 2L5 21l7-3 7 3V5c0-1.1-.9-2-2-2z"})]})},ControlledExample=()=>{const[value,setValue]=(0,react.useState)("");return(0,jsx_runtime.jsx)(components.k2,{placeholder:"Controlled",label:"Controlled",value,onIcChange:event=>{console.log(event.detail.value),setValue(event.detail.value)}})},Uncontrolled=()=>{const textFieldEl=(0,react.useRef)();return(0,jsx_runtime.jsx)(components.k2,{ref:textFieldEl,placeholder:"Uncontrolled",label:"Uncontrolled",onIcChange:()=>{console.log(textFieldEl.current.value)}})},defaultArgs={disabled:!1,fullWidth:!1,helperText:"",hideLabel:!1,inputId:"ic-text-field-input-0",inputmode:"text",label:"Text Field",maxCharacters:0,maxLength:0,maxLengthMessage:"Too many characters",minCharacters:0,name:"0",placeholder:"",readonly:!1,required:!1,resize:!1,rows:1,size:"default",spellcheck:!1,type:"text",validationInline:!1,validationStatus:"none",validationText:"",debounce:0};function _createMdxContent(props){const _components=Object.assign({h3:"h3",pre:"pre",code:"code",path:"path"},(0,lib.RP)(),props.components);return(0,jsx_runtime.jsxs)(jsx_runtime.Fragment,{children:[(0,jsx_runtime.jsx)(dist.W8,{title:"Text field",component:components.k2}),"\n",(0,jsx_runtime.jsx)(dist.VY,{markdown:readme_namespaceObject}),"\n","\n","\n",(0,jsx_runtime.jsx)(_components.h3,{id:"default",children:"Default"}),"\n",(0,jsx_runtime.jsx)(dist.Hl,{children:(0,jsx_runtime.jsxs)(dist.gG,{name:"Default",children:[(0,jsx_runtime.jsx)(components.k2,{label:"What is your favourite coffee?"}),(0,jsx_runtime.jsx)(components.k2,{rows:"6",label:"What is your favourite coffee?"})]})}),"\n",(0,jsx_runtime.jsx)(_components.h3,{id:"placeholder-and-required",children:"Placeholder and required"}),"\n",(0,jsx_runtime.jsx)(dist.Hl,{children:(0,jsx_runtime.jsxs)(dist.gG,{name:"Placeholder and required",children:[(0,jsx_runtime.jsx)(components.k2,{label:"What is your favourite coffee?",required:!0,placeholder:"Placeholder"}),(0,jsx_runtime.jsx)(components.k2,{rows:"6",label:"What is your favourite coffee?",required:!0,placeholder:"Placeholder"})]})}),"\n",(0,jsx_runtime.jsx)(_components.h3,{id:"helper-text",children:"Helper text"}),"\n",(0,jsx_runtime.jsx)(dist.Hl,{children:(0,jsx_runtime.jsxs)(dist.gG,{name:"Helper text",children:[(0,jsx_runtime.jsx)(components.k2,{label:"What is your favourite coffee?",required:!0,placeholder:"Placeholder",helperText:"Such as Arabica, Robusta or Liberica"}),(0,jsx_runtime.jsx)(components.k2,{rows:"6",label:"What is your favourite coffee?",required:!0,placeholder:"Placeholder",helperText:"Such as Arabica, Robusta or Liberica"})]})}),"\n",(0,jsx_runtime.jsx)(_components.h3,{id:"with-icon",children:"With icon"}),"\n",(0,jsx_runtime.jsx)(dist.Hl,{children:(0,jsx_runtime.jsxs)(dist.gG,{name:"With icon",children:[(0,jsx_runtime.jsx)(components.k2,{label:"What is your favourite coffee?",required:!0,placeholder:"Placeholder",helperText:"Such as Arabica, Robusta or Liberica",children:(0,jsx_runtime.jsx)(SlottedIcon,{})}),(0,jsx_runtime.jsx)(components.k2,{rows:"6",label:"What is your favourite coffee?",required:!0,placeholder:"Placeholder",helperText:"Such as Arabica, Robusta or Liberica",children:(0,jsx_runtime.jsx)(SlottedIcon,{})})]})}),"\n",(0,jsx_runtime.jsx)(_components.h3,{id:"with-value",children:"With value"}),"\n",(0,jsx_runtime.jsx)(dist.Hl,{children:(0,jsx_runtime.jsxs)(dist.gG,{name:"With value",children:[(0,jsx_runtime.jsx)(components.k2,{value:"Arabica",label:"What is your favourite coffee?",required:!0,placeholder:"Placeholder",helperText:"Such as Arabica, Robusta or Liberica",children:(0,jsx_runtime.jsx)(SlottedIcon,{})}),(0,jsx_runtime.jsx)(components.k2,{rows:"6",value:"Arabica",label:"What is your favourite coffee?",required:!0,placeholder:"Placeholder",helperText:"Such as Arabica, Robusta or Liberica",children:(0,jsx_runtime.jsx)(SlottedIcon,{})})]})}),"\n",(0,jsx_runtime.jsx)(_components.h3,{id:"max-length",children:"Max length"}),"\n",(0,jsx_runtime.jsx)(dist.Hl,{children:(0,jsx_runtime.jsxs)(dist.gG,{name:"Max length",children:[(0,jsx_runtime.jsx)(components.k2,{maxLength:"25",value:"Arabica",label:"What is your favourite coffee?",required:!0,placeholder:"Placeholder",helperText:"Such as Arabica, Robusta or Liberica"}),(0,jsx_runtime.jsx)(components.k2,{rows:"6",maxLength:"25",value:"Arabica",label:"What is your favourite coffee?",required:!0,placeholder:"Placeholder",helperText:"Such as Arabica, Robusta or Liberica"})]})}),"\n",(0,jsx_runtime.jsx)(_components.h3,{id:"max-length-message",children:"Max length message"}),"\n",(0,jsx_runtime.jsx)(dist.Hl,{children:(0,jsx_runtime.jsxs)(dist.gG,{name:"Max length message",children:[(0,jsx_runtime.jsx)(components.k2,{maxLength:"25",value:"Arabica",label:"What is your favourite coffee?",required:!0,placeholder:"Placeholder",helperText:"Such as Arabica, Robusta or Liberica",maxLengthMessage:"You have exceeded the maximum length"}),(0,jsx_runtime.jsx)(components.k2,{rows:"6",maxLength:"25",value:"Arabica",label:"What is your favourite coffee?",required:!0,placeholder:"Placeholder",helperText:"Such as Arabica, Robusta or Liberica",maxLengthMessage:"You have exceeded the maximum length"})]})}),"\n",(0,jsx_runtime.jsx)(_components.h3,{id:"full-width",children:"Full width"}),"\n",(0,jsx_runtime.jsx)(dist.Hl,{children:(0,jsx_runtime.jsxs)(dist.gG,{name:"Full width",children:[(0,jsx_runtime.jsx)(components.k2,{fullWidth:"true",maxLength:"25",value:"Arabica",label:"What is your favourite coffee?",required:!0,placeholder:"Placeholder",helperText:"Such as Arabica, Robusta or Liberica"}),(0,jsx_runtime.jsx)(components.k2,{fullWidth:"true",true:"6",maxLength:"25",value:"Arabica",label:"What is your favourite coffee?",required:!0,placeholder:"Placeholder",helperText:"Such as Arabica, Robusta or Liberica"})]})}),"\n",(0,jsx_runtime.jsx)(_components.h3,{id:"disabled",children:"Disabled"}),"\n",(0,jsx_runtime.jsx)(dist.Hl,{children:(0,jsx_runtime.jsxs)(dist.gG,{name:"Disabled",children:[(0,jsx_runtime.jsx)(components.k2,{disabled:!0,maxLength:"25",value:"Arabica",label:"What is your favourite coffee?",required:!0,placeholder:"Placeholder",helperText:"Such as Arabica, Robusta or Liberica"}),(0,jsx_runtime.jsx)(components.k2,{rows:"6",disabled:!0,maxLength:"25",value:"Arabica",label:"What is your favourite coffee?",required:!0,placeholder:"Placeholder",helperText:"Such as Arabica, Robusta or Liberica"})]})}),"\n",(0,jsx_runtime.jsx)(_components.h3,{id:"read-only",children:"Read only"}),"\n",(0,jsx_runtime.jsx)(dist.Hl,{children:(0,jsx_runtime.jsxs)(dist.gG,{name:"Read only",children:[(0,jsx_runtime.jsx)(components.k2,{readonly:!0,maxLength:"25",value:"Arabica",label:"What is your favourite coffee?",required:!0,placeholder:"Placeholder",helperText:"Such as Arabica, Robusta or Liberica"}),(0,jsx_runtime.jsx)(components.k2,{rows:"6",readonly:!0,maxLength:"25",value:"Arabica",label:"What is your favourite coffee?",required:!0,placeholder:"Placeholder",helperText:"Such as Arabica, Robusta or Liberica"})]})}),"\n",(0,jsx_runtime.jsx)(_components.h3,{id:"validation",children:"Validation"}),"\n",(0,jsx_runtime.jsx)(dist.Hl,{children:(0,jsx_runtime.jsxs)(dist.gG,{name:"Validation",children:[(0,jsx_runtime.jsx)(components.k2,{maxLength:"25",value:"Arabica",label:"What is your favourite coffee?",required:!0,helperText:"Such as Arabica, Robusta or Liberica",validationStatus:"success",validationText:"Good choice!",children:(0,jsx_runtime.jsx)(SlottedIcon,{})}),(0,jsx_runtime.jsx)(components.k2,{rows:"6",maxLength:"25",value:"Arabica",label:"What is your favourite coffee?",required:!0,helperText:"Such as Arabica, Robusta or Liberica",validationStatus:"success",validationText:"Good choice!",children:(0,jsx_runtime.jsx)(SlottedIcon,{})}),(0,jsx_runtime.jsx)(components.k2,{maxLength:"25",value:"Arabica",label:"What is your favourite coffee?",required:!0,helperText:"Such as Arabica, Robusta or Liberica",validationStatus:"success",validationText:"Good choice!",validationInline:!0,children:(0,jsx_runtime.jsx)(SlottedIcon,{})}),(0,jsx_runtime.jsx)(components.k2,{maxLength:"25",size:"small",value:"Arabica",label:"What is your favourite coffee?",required:!0,helperText:"Such as Arabica, Robusta or Liberica",validationStatus:"success",validationText:"Good choice!",validationInline:!0,children:(0,jsx_runtime.jsx)(SlottedIcon,{})}),(0,jsx_runtime.jsx)(components.k2,{maxLength:"25",value:"Arabica",label:"What is your favourite coffee?",required:!0,helperText:"Such as Arabica, Robusta or Liberica",validationStatus:"warning",validationText:"A very long warning message to test if wrapping works",children:(0,jsx_runtime.jsx)(SlottedIcon,{})}),(0,jsx_runtime.jsx)(components.k2,{rows:"6",maxLength:"25",value:"Arabica",label:"What is your favourite coffee?",required:!0,helperText:"Such as Arabica, Robusta or Liberica",validationStatus:"warning",validationText:"A very long warning message to test if wrapping works",children:(0,jsx_runtime.jsx)(SlottedIcon,{})}),(0,jsx_runtime.jsx)(components.k2,{maxLength:"25",value:"Tea",label:"What is your favourite coffee?",required:!0,helperText:"Such as Arabica, Robusta or Liberica",validationStatus:"error",validationText:"Now it has really gone to (coffee) pot",children:(0,jsx_runtime.jsx)(SlottedIcon,{})}),(0,jsx_runtime.jsx)(components.k2,{rows:"6",maxLength:"25",value:"Tea",label:"What is your favourite coffee?",required:!0,helperText:"Such as Arabica, Robusta or Liberica",validationStatus:"error",validationText:"Now it has really gone to (coffee) pot",children:(0,jsx_runtime.jsx)(SlottedIcon,{})}),(0,jsx_runtime.jsx)(components.k2,{validationStatus:"error",validationText:"now it has really gone to (coffee) pot",value:"6",inputmode:"numeric",label:"How many coffees do you want?",helperText:"Our coffee machines have a maximum capacity of 4 coffees at a time.",type:"number",min:"1",max:"4",required:!0,children:(0,jsx_runtime.jsx)(SlottedIcon,{})}),(0,jsx_runtime.jsx)(components.k2,{validationStatus:"error",validationText:"now it has really gone to (coffee) pot",value:"0",inputmode:"numeric",label:"How many coffees do you want?",helperText:"Our coffee machines have a maximum capacity of 4 coffees at a time.",type:"number",min:"1",max:"4",required:!0,children:(0,jsx_runtime.jsx)(SlottedIcon,{})}),(0,jsx_runtime.jsx)(components.k2,{validationStatus:"error",validationText:"I'm not familiar with this type of coffee",validationInlineInternal:"true",value:"Milkshake",label:"What is your favourite coffee?",required:!0,hideLabel:!0,size:"small",placeholder:"Placeholder",helperText:"Such as Arabica, Robusta or Liberica",children:(0,jsx_runtime.jsx)(SlottedIcon,{})})]})}),"\n",(0,jsx_runtime.jsx)(_components.h3,{id:"text-area-with-resize",children:"Text area with resize"}),"\n",(0,jsx_runtime.jsx)(dist.Hl,{children:(0,jsx_runtime.jsx)(dist.gG,{name:"Text area with resize",children:(0,jsx_runtime.jsx)(components.k2,{rows:"6",maxLength:"25",value:"Arabica",label:"What is your favourite coffee?",required:!0,placeholder:"Placeholder",helperText:"Such as Arabica, Robusta or Liberica",resize:!0,size:"small"})})}),"\n",(0,jsx_runtime.jsx)(_components.h3,{id:"controlled",children:"Controlled"}),"\n",(0,jsx_runtime.jsx)(_components.pre,{children:(0,jsx_runtime.jsx)(_components.code,{children:'export const ControlledExample = () => {\n  const [value, setValue] = useState("");\n  const handleChange = (event) => {\n    console.log(event.detail.value);\n    setValue(event.detail.value);\n  }\n  return (\n    <IcTextField placeholder="Controlled" label="Controlled" value={value} onIcChange={handleChange} />\n  );\n};\n'})}),"\n",(0,jsx_runtime.jsx)(dist.Hl,{children:(0,jsx_runtime.jsx)(dist.gG,{name:"Controlled",children:(0,jsx_runtime.jsx)(ControlledExample,{})})}),"\n",(0,jsx_runtime.jsx)(_components.h3,{id:"uncontrolled",children:"Uncontrolled"}),"\n","\n",(0,jsx_runtime.jsx)(dist.Hl,{children:(0,jsx_runtime.jsx)(dist.gG,{name:"Uncontrolled",children:(0,jsx_runtime.jsx)(Uncontrolled,{})})}),"\n",(0,jsx_runtime.jsx)(_components.h3,{id:"min-and-max",children:"Min and max"}),"\n",(0,jsx_runtime.jsx)(dist.Hl,{children:(0,jsx_runtime.jsx)(dist.gG,{name:"Min and max",children:(0,jsx_runtime.jsx)(components.k2,{inputmode:"numeric",label:"How many coffees do you want?",type:"number",min:1,max:4,helperText:"Our coffee machines have a maximum capacity of 4 coffees at a time."})})}),"\n",(0,jsx_runtime.jsx)(_components.h3,{id:"maximum-and-minimum-characters",children:"Maximum and minimum characters"}),"\n",(0,jsx_runtime.jsx)(dist.Hl,{children:(0,jsx_runtime.jsxs)(dist.gG,{name:"Maximum and minimum characters",parameters:{loki:{skip:!0}},children:[(0,jsx_runtime.jsx)(components.k2,{"max-characters":2,label:"What is your favourite coffee?","helper-text":"Short answers only."}),(0,jsx_runtime.jsx)(components.k2,{"min-characters":3,label:"What is your favourite coffee?","helper-text":"Long answer please."})]})}),"\n",(0,jsx_runtime.jsx)(_components.h3,{id:"playground",children:"Playground"}),"\n","\n",(0,jsx_runtime.jsx)(dist.Hl,{children:(0,jsx_runtime.jsx)(dist.gG,{args:defaultArgs,argTypes:{inputmode:{options:["none","text","tel","url","email","numeric","decimal","search"],control:{type:"select"}},size:{options:["default","small"],control:{type:"inline-radio"}},type:{options:["email","password","tel","text","url","number","search"],control:{type:"select"}},validationStatus:{options:["warning","error","success","none"],mapping:{warning:"warning",error:"error",success:"success",none:""},control:{type:"select"}},showIconSlot:{control:{type:"boolean"}}},name:"Playground",children:args=>(0,jsx_runtime.jsx)(components.k2,{label:args.label,disabled:args.disabled,fullWidth:args.fullWidth,helperText:args.helperText,hideLabel:args.hideLabel,inputId:args.inputId,inputmode:args.inputmode,max:args.max,maxCharacters:args.maxCharacters,maxLength:args.maxLength,maxLengthMessage:args.maxLengthMessage,min:args.min,minCharacters:args.minCharacters,name:args.name,placeholder:args.placeholder,readonly:args.readonly,required:args.required,resize:args.resize,rows:args.rows,size:args.size,spellcheck:args.spellcheck,type:args.type,validationInline:args.validationInline,validationStatus:args.validationStatus,validationText:args.validationText,debounce:args.debounce,onIcChange:ev=>console.log(ev.detail.value),children:args.showIconSlot&&(0,jsx_runtime.jsxs)(slottedSVG.k,{slot:"icon",xmlns:"http://www.w3.org/2000/svg",height:"24px",viewBox:"0 0 24 24",width:"24px",fill:"#000000",children:[(0,jsx_runtime.jsx)(_components.path,{d:"M0 0h24v24H0z",fill:"none"}),(0,jsx_runtime.jsx)(_components.path,{d:"M17 3H7c-1.1 0-1.99.9-1.99 2L5 21l7-3 7 3V5c0-1.1-.9-2-2-2z"})]})})})})]})}const defaultStory=()=>(0,jsx_runtime.jsxs)(jsx_runtime.Fragment,{children:[(0,jsx_runtime.jsx)(components.k2,{label:"What is your favourite coffee?"}),(0,jsx_runtime.jsx)(components.k2,{rows:"6",label:"What is your favourite coffee?"})]});defaultStory.storyName="Default",defaultStory.parameters={storySource:{source:'<IcTextField label="What is your favourite coffee?" />\n<IcTextField rows="6" label="What is your favourite coffee?" />'}};const placeholderAndRequired=()=>(0,jsx_runtime.jsxs)(jsx_runtime.Fragment,{children:[(0,jsx_runtime.jsx)(components.k2,{label:"What is your favourite coffee?",required:!0,placeholder:"Placeholder"}),(0,jsx_runtime.jsx)(components.k2,{rows:"6",label:"What is your favourite coffee?",required:!0,placeholder:"Placeholder"})]});placeholderAndRequired.storyName="Placeholder and required",placeholderAndRequired.parameters={storySource:{source:'<IcTextField label="What is your favourite coffee?" required placeholder="Placeholder" />\n<IcTextField rows="6" label="What is your favourite coffee?" required placeholder="Placeholder" />'}};const helperText=()=>(0,jsx_runtime.jsxs)(jsx_runtime.Fragment,{children:[(0,jsx_runtime.jsx)(components.k2,{label:"What is your favourite coffee?",required:!0,placeholder:"Placeholder",helperText:"Such as Arabica, Robusta or Liberica"}),(0,jsx_runtime.jsx)(components.k2,{rows:"6",label:"What is your favourite coffee?",required:!0,placeholder:"Placeholder",helperText:"Such as Arabica, Robusta or Liberica"})]});helperText.storyName="Helper text",helperText.parameters={storySource:{source:'<IcTextField label="What is your favourite coffee?" required placeholder="Placeholder" helperText="Such as Arabica, Robusta or Liberica" />\n<IcTextField rows="6" label="What is your favourite coffee?" required placeholder="Placeholder" helperText="Such as Arabica, Robusta or Liberica" />'}};const withIcon=()=>(0,jsx_runtime.jsxs)(jsx_runtime.Fragment,{children:[(0,jsx_runtime.jsx)(components.k2,{label:"What is your favourite coffee?",required:!0,placeholder:"Placeholder",helperText:"Such as Arabica, Robusta or Liberica",children:(0,jsx_runtime.jsx)(SlottedIcon,{})}),(0,jsx_runtime.jsx)(components.k2,{rows:"6",label:"What is your favourite coffee?",required:!0,placeholder:"Placeholder",helperText:"Such as Arabica, Robusta or Liberica",children:(0,jsx_runtime.jsx)(SlottedIcon,{})})]});withIcon.storyName="With icon",withIcon.parameters={storySource:{source:'<IcTextField label="What is your favourite coffee?" required placeholder="Placeholder" helperText="Such as Arabica, Robusta or Liberica"><SlottedIcon /></IcTextField>\n<IcTextField rows="6" label="What is your favourite coffee?" required placeholder="Placeholder" helperText="Such as Arabica, Robusta or Liberica"><SlottedIcon /></IcTextField>'}};const withValue=()=>(0,jsx_runtime.jsxs)(jsx_runtime.Fragment,{children:[(0,jsx_runtime.jsx)(components.k2,{value:"Arabica",label:"What is your favourite coffee?",required:!0,placeholder:"Placeholder",helperText:"Such as Arabica, Robusta or Liberica",children:(0,jsx_runtime.jsx)(SlottedIcon,{})}),(0,jsx_runtime.jsx)(components.k2,{rows:"6",value:"Arabica",label:"What is your favourite coffee?",required:!0,placeholder:"Placeholder",helperText:"Such as Arabica, Robusta or Liberica",children:(0,jsx_runtime.jsx)(SlottedIcon,{})})]});withValue.storyName="With value",withValue.parameters={storySource:{source:'<IcTextField value="Arabica" label="What is your favourite coffee?" required placeholder="Placeholder" helperText="Such as Arabica, Robusta or Liberica"><SlottedIcon /></IcTextField>\n<IcTextField rows="6" value="Arabica" label="What is your favourite coffee?" required placeholder="Placeholder" helperText="Such as Arabica, Robusta or Liberica"><SlottedIcon /></IcTextField>'}};const maxLength=()=>(0,jsx_runtime.jsxs)(jsx_runtime.Fragment,{children:[(0,jsx_runtime.jsx)(components.k2,{maxLength:"25",value:"Arabica",label:"What is your favourite coffee?",required:!0,placeholder:"Placeholder",helperText:"Such as Arabica, Robusta or Liberica"}),(0,jsx_runtime.jsx)(components.k2,{rows:"6",maxLength:"25",value:"Arabica",label:"What is your favourite coffee?",required:!0,placeholder:"Placeholder",helperText:"Such as Arabica, Robusta or Liberica"})]});maxLength.storyName="Max length",maxLength.parameters={storySource:{source:'<IcTextField maxLength="25" value="Arabica" label="What is your favourite coffee?" required placeholder="Placeholder" helperText="Such as Arabica, Robusta or Liberica" />\n<IcTextField rows="6" maxLength="25" value="Arabica" label="What is your favourite coffee?" required placeholder="Placeholder" helperText="Such as Arabica, Robusta or Liberica" />'}};const maxLengthMessage=()=>(0,jsx_runtime.jsxs)(jsx_runtime.Fragment,{children:[(0,jsx_runtime.jsx)(components.k2,{maxLength:"25",value:"Arabica",label:"What is your favourite coffee?",required:!0,placeholder:"Placeholder",helperText:"Such as Arabica, Robusta or Liberica",maxLengthMessage:"You have exceeded the maximum length"}),(0,jsx_runtime.jsx)(components.k2,{rows:"6",maxLength:"25",value:"Arabica",label:"What is your favourite coffee?",required:!0,placeholder:"Placeholder",helperText:"Such as Arabica, Robusta or Liberica",maxLengthMessage:"You have exceeded the maximum length"})]});maxLengthMessage.storyName="Max length message",maxLengthMessage.parameters={storySource:{source:'<IcTextField maxLength="25" value="Arabica" label="What is your favourite coffee?" required placeholder="Placeholder" helperText="Such as Arabica, Robusta or Liberica" maxLengthMessage="You have exceeded the maximum length" />\n<IcTextField rows="6" maxLength="25" value="Arabica" label="What is your favourite coffee?" required placeholder="Placeholder" helperText="Such as Arabica, Robusta or Liberica" maxLengthMessage="You have exceeded the maximum length" />'}};const fullWidth=()=>(0,jsx_runtime.jsxs)(jsx_runtime.Fragment,{children:[(0,jsx_runtime.jsx)(components.k2,{fullWidth:"true",maxLength:"25",value:"Arabica",label:"What is your favourite coffee?",required:!0,placeholder:"Placeholder",helperText:"Such as Arabica, Robusta or Liberica"}),(0,jsx_runtime.jsx)(components.k2,{fullWidth:"true",true:"6",maxLength:"25",value:"Arabica",label:"What is your favourite coffee?",required:!0,placeholder:"Placeholder",helperText:"Such as Arabica, Robusta or Liberica"})]});fullWidth.storyName="Full width",fullWidth.parameters={storySource:{source:'<IcTextField fullWidth="true" maxLength="25" value="Arabica" label="What is your favourite coffee?" required placeholder="Placeholder" helperText="Such as Arabica, Robusta or Liberica" />\n<IcTextField fullWidth="true" true="6" maxLength="25" value="Arabica" label="What is your favourite coffee?" required placeholder="Placeholder" helperText="Such as Arabica, Robusta or Liberica" />'}};const disabled=()=>(0,jsx_runtime.jsxs)(jsx_runtime.Fragment,{children:[(0,jsx_runtime.jsx)(components.k2,{disabled:!0,maxLength:"25",value:"Arabica",label:"What is your favourite coffee?",required:!0,placeholder:"Placeholder",helperText:"Such as Arabica, Robusta or Liberica"}),(0,jsx_runtime.jsx)(components.k2,{rows:"6",disabled:!0,maxLength:"25",value:"Arabica",label:"What is your favourite coffee?",required:!0,placeholder:"Placeholder",helperText:"Such as Arabica, Robusta or Liberica"})]});disabled.storyName="Disabled",disabled.parameters={storySource:{source:'<IcTextField disabled maxLength="25" value="Arabica" label="What is your favourite coffee?" required placeholder="Placeholder" helperText="Such as Arabica, Robusta or Liberica" />\n<IcTextField rows="6" disabled maxLength="25" value="Arabica" label="What is your favourite coffee?" required placeholder="Placeholder" helperText="Such as Arabica, Robusta or Liberica" />'}};const readOnly=()=>(0,jsx_runtime.jsxs)(jsx_runtime.Fragment,{children:[(0,jsx_runtime.jsx)(components.k2,{readonly:!0,maxLength:"25",value:"Arabica",label:"What is your favourite coffee?",required:!0,placeholder:"Placeholder",helperText:"Such as Arabica, Robusta or Liberica"}),(0,jsx_runtime.jsx)(components.k2,{rows:"6",readonly:!0,maxLength:"25",value:"Arabica",label:"What is your favourite coffee?",required:!0,placeholder:"Placeholder",helperText:"Such as Arabica, Robusta or Liberica"})]});readOnly.storyName="Read only",readOnly.parameters={storySource:{source:'<IcTextField readonly maxLength="25" value="Arabica" label="What is your favourite coffee?" required placeholder="Placeholder" helperText="Such as Arabica, Robusta or Liberica" />\n<IcTextField rows="6" readonly maxLength="25" value="Arabica" label="What is your favourite coffee?" required placeholder="Placeholder" helperText="Such as Arabica, Robusta or Liberica" />'}};const validation=()=>(0,jsx_runtime.jsxs)(jsx_runtime.Fragment,{children:[(0,jsx_runtime.jsx)(components.k2,{maxLength:"25",value:"Arabica",label:"What is your favourite coffee?",required:!0,helperText:"Such as Arabica, Robusta or Liberica",validationStatus:"success",validationText:"Good choice!",children:(0,jsx_runtime.jsx)(SlottedIcon,{})}),(0,jsx_runtime.jsx)(components.k2,{rows:"6",maxLength:"25",value:"Arabica",label:"What is your favourite coffee?",required:!0,helperText:"Such as Arabica, Robusta or Liberica",validationStatus:"success",validationText:"Good choice!",children:(0,jsx_runtime.jsx)(SlottedIcon,{})}),(0,jsx_runtime.jsx)(components.k2,{maxLength:"25",value:"Arabica",label:"What is your favourite coffee?",required:!0,helperText:"Such as Arabica, Robusta or Liberica",validationStatus:"success",validationText:"Good choice!",validationInline:!0,children:(0,jsx_runtime.jsx)(SlottedIcon,{})}),(0,jsx_runtime.jsx)(components.k2,{maxLength:"25",size:"small",value:"Arabica",label:"What is your favourite coffee?",required:!0,helperText:"Such as Arabica, Robusta or Liberica",validationStatus:"success",validationText:"Good choice!",validationInline:!0,children:(0,jsx_runtime.jsx)(SlottedIcon,{})}),(0,jsx_runtime.jsx)(components.k2,{maxLength:"25",value:"Arabica",label:"What is your favourite coffee?",required:!0,helperText:"Such as Arabica, Robusta or Liberica",validationStatus:"warning",validationText:"A very long warning message to test if wrapping works",children:(0,jsx_runtime.jsx)(SlottedIcon,{})}),(0,jsx_runtime.jsx)(components.k2,{rows:"6",maxLength:"25",value:"Arabica",label:"What is your favourite coffee?",required:!0,helperText:"Such as Arabica, Robusta or Liberica",validationStatus:"warning",validationText:"A very long warning message to test if wrapping works",children:(0,jsx_runtime.jsx)(SlottedIcon,{})}),(0,jsx_runtime.jsx)(components.k2,{maxLength:"25",value:"Tea",label:"What is your favourite coffee?",required:!0,helperText:"Such as Arabica, Robusta or Liberica",validationStatus:"error",validationText:"Now it has really gone to (coffee) pot",children:(0,jsx_runtime.jsx)(SlottedIcon,{})}),(0,jsx_runtime.jsx)(components.k2,{rows:"6",maxLength:"25",value:"Tea",label:"What is your favourite coffee?",required:!0,helperText:"Such as Arabica, Robusta or Liberica",validationStatus:"error",validationText:"Now it has really gone to (coffee) pot",children:(0,jsx_runtime.jsx)(SlottedIcon,{})}),(0,jsx_runtime.jsx)(components.k2,{validationStatus:"error",validationText:"now it has really gone to (coffee) pot",value:"6",inputmode:"numeric",label:"How many coffees do you want?",helperText:"Our coffee machines have a maximum capacity of 4 coffees at a time.",type:"number",min:"1",max:"4",required:!0,children:(0,jsx_runtime.jsx)(SlottedIcon,{})}),(0,jsx_runtime.jsx)(components.k2,{validationStatus:"error",validationText:"now it has really gone to (coffee) pot",value:"0",inputmode:"numeric",label:"How many coffees do you want?",helperText:"Our coffee machines have a maximum capacity of 4 coffees at a time.",type:"number",min:"1",max:"4",required:!0,children:(0,jsx_runtime.jsx)(SlottedIcon,{})}),(0,jsx_runtime.jsx)(components.k2,{validationStatus:"error",validationText:"I'm not familiar with this type of coffee",validationInlineInternal:"true",value:"Milkshake",label:"What is your favourite coffee?",required:!0,hideLabel:!0,size:"small",placeholder:"Placeholder",helperText:"Such as Arabica, Robusta or Liberica",children:(0,jsx_runtime.jsx)(SlottedIcon,{})})]});validation.storyName="Validation",validation.parameters={storySource:{source:'<IcTextField maxLength="25" value="Arabica" label="What is your favourite coffee?" required helperText="Such as Arabica, Robusta or Liberica" validationStatus="success" validationText="Good choice!"><SlottedIcon /></IcTextField>\n<IcTextField rows="6" maxLength="25" value="Arabica" label="What is your favourite coffee?" required helperText="Such as Arabica, Robusta or Liberica" validationStatus="success" validationText="Good choice!"><SlottedIcon /></IcTextField>\n<IcTextField maxLength="25" value="Arabica" label="What is your favourite coffee?" required helperText="Such as Arabica, Robusta or Liberica" validationStatus="success" validationText="Good choice!" validationInline><SlottedIcon /></IcTextField>\n<IcTextField maxLength="25" size="small" value="Arabica" label="What is your favourite coffee?" required helperText="Such as Arabica, Robusta or Liberica" validationStatus="success" validationText="Good choice!" validationInline><SlottedIcon /></IcTextField>\n<IcTextField maxLength="25" value="Arabica" label="What is your favourite coffee?" required helperText="Such as Arabica, Robusta or Liberica" validationStatus="warning" validationText="A very long warning message to test if wrapping works"><SlottedIcon /></IcTextField>\n<IcTextField rows="6" maxLength="25" value="Arabica" label="What is your favourite coffee?" required helperText="Such as Arabica, Robusta or Liberica" validationStatus="warning" validationText="A very long warning message to test if wrapping works"><SlottedIcon /></IcTextField>\n<IcTextField maxLength="25" value="Tea" label="What is your favourite coffee?" required helperText="Such as Arabica, Robusta or Liberica" validationStatus="error" validationText="Now it has really gone to (coffee) pot"><SlottedIcon /></IcTextField>\n<IcTextField rows="6" maxLength="25" value="Tea" label="What is your favourite coffee?" required helperText="Such as Arabica, Robusta or Liberica" validationStatus="error" validationText="Now it has really gone to (coffee) pot"><SlottedIcon /></IcTextField>\n<IcTextField validationStatus="error" validationText="now it has really gone to (coffee) pot" value="6" inputmode="numeric" label="How many coffees do you want?" helperText="Our coffee machines have a maximum capacity of 4 coffees at a time." type="number" min="1" max="4" required><SlottedIcon /></IcTextField>\n<IcTextField validationStatus="error" validationText="now it has really gone to (coffee) pot" value="0" inputmode="numeric" label="How many coffees do you want?" helperText="Our coffee machines have a maximum capacity of 4 coffees at a time." type="number" min="1" max="4" required><SlottedIcon /></IcTextField>\n<IcTextField validationStatus="error" validationText="I\'m not familiar with this type of coffee" validationInlineInternal="true" value="Milkshake" label="What is your favourite coffee?" required hideLabel size="small" placeholder="Placeholder" helperText="Such as Arabica, Robusta or Liberica"><SlottedIcon /></IcTextField>'}};const textAreaWithResize=()=>(0,jsx_runtime.jsx)(components.k2,{rows:"6",maxLength:"25",value:"Arabica",label:"What is your favourite coffee?",required:!0,placeholder:"Placeholder",helperText:"Such as Arabica, Robusta or Liberica",resize:!0,size:"small"});textAreaWithResize.storyName="Text area with resize",textAreaWithResize.parameters={storySource:{source:'<IcTextField rows="6" maxLength="25" value="Arabica" label="What is your favourite coffee?" required placeholder="Placeholder" helperText="Such as Arabica, Robusta or Liberica" resize size="small" />'}};const controlled=()=>(0,jsx_runtime.jsx)(ControlledExample,{});controlled.storyName="Controlled",controlled.parameters={storySource:{source:"<ControlledExample />"}};const uncontrolled=()=>(0,jsx_runtime.jsx)(Uncontrolled,{});uncontrolled.storyName="Uncontrolled",uncontrolled.parameters={storySource:{source:"<Uncontrolled />"}};const minAndMax=()=>(0,jsx_runtime.jsx)(components.k2,{inputmode:"numeric",label:"How many coffees do you want?",type:"number",min:1,max:4,helperText:"Our coffee machines have a maximum capacity of 4 coffees at a time."});minAndMax.storyName="Min and max",minAndMax.parameters={storySource:{source:'<IcTextField inputmode="numeric" label="How many coffees do you want?" type="number" min={1} max={4} helperText="Our coffee machines have a maximum capacity of 4 coffees at a time." />'}};const maximumAndMinimumCharacters=()=>(0,jsx_runtime.jsxs)(jsx_runtime.Fragment,{children:[(0,jsx_runtime.jsx)(components.k2,{"max-characters":2,label:"What is your favourite coffee?","helper-text":"Short answers only."}),(0,jsx_runtime.jsx)(components.k2,{"min-characters":3,label:"What is your favourite coffee?","helper-text":"Long answer please."})]});maximumAndMinimumCharacters.storyName="Maximum and minimum characters",maximumAndMinimumCharacters.parameters={storySource:{source:'<IcTextField max-characters={2} label="What is your favourite coffee?" helper-text="Short answers only." />\n<IcTextField min-characters={3} label="What is your favourite coffee?" helper-text="Long answer please." />'},loki:{skip:!0}};const playground=args=>(0,jsx_runtime.jsx)(components.k2,{label:args.label,disabled:args.disabled,fullWidth:args.fullWidth,helperText:args.helperText,hideLabel:args.hideLabel,inputId:args.inputId,inputmode:args.inputmode,max:args.max,maxCharacters:args.maxCharacters,maxLength:args.maxLength,maxLengthMessage:args.maxLengthMessage,min:args.min,minCharacters:args.minCharacters,name:args.name,placeholder:args.placeholder,readonly:args.readonly,required:args.required,resize:args.resize,rows:args.rows,size:args.size,spellcheck:args.spellcheck,type:args.type,validationInline:args.validationInline,validationStatus:args.validationStatus,validationText:args.validationText,debounce:args.debounce,onIcChange:ev=>console.log(ev.detail.value),children:args.showIconSlot&&(0,jsx_runtime.jsxs)(slottedSVG.k,{slot:"icon",xmlns:"http://www.w3.org/2000/svg",height:"24px",viewBox:"0 0 24 24",width:"24px",fill:"#000000",children:[(0,jsx_runtime.jsx)("path",{d:"M0 0h24v24H0z",fill:"none"}),(0,jsx_runtime.jsx)("path",{d:"M17 3H7c-1.1 0-1.99.9-1.99 2L5 21l7-3 7 3V5c0-1.1-.9-2-2-2z"})]})});playground.storyName="Playground",playground.argTypes={inputmode:{options:["none","text","tel","url","email","numeric","decimal","search"],control:{type:"select"}},size:{options:["default","small"],control:{type:"inline-radio"}},type:{options:["email","password","tel","text","url","number","search"],control:{type:"select"}},validationStatus:{options:["warning","error","success","none"],mapping:{warning:"warning",error:"error",success:"success",none:""},control:{type:"select"}},showIconSlot:{control:{type:"boolean"}}},playground.args=defaultArgs,playground.parameters={storySource:{source:'args => <IcTextField label={args.label} disabled={args.disabled} fullWidth={args.fullWidth} helperText={args.helperText} hideLabel={args.hideLabel} inputId={args.inputId} inputmode={args.inputmode} max={args.max} maxCharacters={args.maxCharacters} maxLength={args.maxLength} maxLengthMessage={args.maxLengthMessage} min={args.min} minCharacters={args.minCharacters} name={args.name} placeholder={args.placeholder} readonly={args.readonly} required={args.required} resize={args.resize} rows={args.rows} size={args.size} spellcheck={args.spellcheck} type={args.type} validationInline={args.validationInline} validationStatus={args.validationStatus} validationText={args.validationText} debounce={args.debounce} onIcChange={ev => console.log(ev.detail.value)}>\n        {args.showIconSlot && <SlottedSVG slot="icon" xmlns="http://www.w3.org/2000/svg" height="24px" viewBox="0 0 24 24" width="24px" fill="#000000">\n            <path d="M0 0h24v24H0z" fill="none" />\n            <path d="M17 3H7c-1.1 0-1.99.9-1.99 2L5 21l7-3 7 3V5c0-1.1-.9-2-2-2z" />\n          </SlottedSVG>}\n      </IcTextField>'}};const componentMeta={title:"Text field",component:components.k2,tags:["stories-mdx"],includeStories:["defaultStory","placeholderAndRequired","helperText","withIcon","withValue","maxLength","maxLengthMessage","fullWidth","disabled","readOnly","validation","textAreaWithResize","controlled","uncontrolled","minAndMax","maximumAndMinimumCharacters","playground"]};componentMeta.parameters=componentMeta.parameters||{},componentMeta.parameters.docs={...componentMeta.parameters.docs||{},page:function MDXContent(props={}){const{wrapper:MDXLayout}=Object.assign({},(0,lib.RP)(),props.components);return MDXLayout?(0,jsx_runtime.jsx)(MDXLayout,{...props,children:(0,jsx_runtime.jsx)(_createMdxContent,{...props})}):_createMdxContent(props)}};const ic_text_field_stories=componentMeta,__namedExportsOrder=["SlottedIcon","ControlledExample","Uncontrolled","defaultArgs","defaultStory","placeholderAndRequired","helperText","withIcon","withValue","maxLength","maxLengthMessage","fullWidth","disabled","readOnly","validation","textAreaWithResize","controlled","uncontrolled","minAndMax","maximumAndMinimumCharacters","playground"]},"./src/react-component-lib/slottedSVG.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{k:()=>SlottedSVG});__webpack_require__("./node_modules/react/index.js");var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/react/jsx-runtime.js");const defaultProps={xmlns:"http://www.w3.org/2000/svg"};function slot(){let name=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"";return{ref:e=>e?e.setAttribute("slot",name):null}}const SlottedSVG=_ref=>{let{path,slot:slotName,children,...props}=_ref;return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)("svg",{...slot(slotName),...props,...defaultProps,children:[!!path&&(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)("path",{d:path}),children]})};SlottedSVG.displayName="SlottedSVG";try{SlottedSVG.displayName="SlottedSVG",SlottedSVG.__docgenInfo={description:"",displayName:"SlottedSVG",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/react-component-lib/slottedSVG.tsx#SlottedSVG"]={docgenInfo:SlottedSVG.__docgenInfo,name:"SlottedSVG",path:"src/react-component-lib/slottedSVG.tsx#SlottedSVG"})}catch(__react_docgen_typescript_loader_error){}},"./node_modules/react/cjs/react-jsx-runtime.production.min.js":(__unused_webpack_module,exports,__webpack_require__)=>{var f=__webpack_require__("./node_modules/react/index.js"),g=60103;if(exports.Fragment=60107,"function"==typeof Symbol&&Symbol.for){var h=Symbol.for;g=h("react.element"),exports.Fragment=h("react.fragment")}var m=f.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,n=Object.prototype.hasOwnProperty,p={key:!0,ref:!0,__self:!0,__source:!0};function q(c,a,k){var b,d={},e=null,l=null;for(b in void 0!==k&&(e=""+k),void 0!==a.key&&(e=""+a.key),void 0!==a.ref&&(l=a.ref),a)n.call(a,b)&&!p.hasOwnProperty(b)&&(d[b]=a[b]);if(c&&c.defaultProps)for(b in a=c.defaultProps)void 0===d[b]&&(d[b]=a[b]);return{$$typeof:g,type:c,key:e,ref:l,props:d,_owner:m.current}}exports.jsx=q,exports.jsxs=q},"./node_modules/react/jsx-runtime.js":(module,__unused_webpack_exports,__webpack_require__)=>{module.exports=__webpack_require__("./node_modules/react/cjs/react-jsx-runtime.production.min.js")}}]);