/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { IcDataTableColumnObject, IcDataTableDensityOptions, IcDataTableRowHeights, IcDataTableSortOrderOptions, IcDensityUpdateEventDetail } from "./components/ic-data-table/ic-data-table.types";
import { IcThemeForegroundNoDefault } from "@ukic/web-components/dist/types/utils/types";
import { IcPaginationAlignmentOptions, IcPaginationControlTypes, IcPaginationTypes } from "./components/ic-pagination/ic-pagination.types";
import { IcThemeForeground } from "@ukic/web-components/dist/types/interface";
export { IcDataTableColumnObject, IcDataTableDensityOptions, IcDataTableRowHeights, IcDataTableSortOrderOptions, IcDensityUpdateEventDetail } from "./components/ic-data-table/ic-data-table.types";
export { IcThemeForegroundNoDefault } from "@ukic/web-components/dist/types/utils/types";
export { IcPaginationAlignmentOptions, IcPaginationControlTypes, IcPaginationTypes } from "./components/ic-pagination/ic-pagination.types";
export { IcThemeForeground } from "@ukic/web-components/dist/types/interface";
export namespace Components {
    interface IcDataTable {
        /**
          * The title for the table only visible to screen readers.
         */
        "caption": string;
        /**
          * The column headers for the table.
         */
        "columns": IcDataTableColumnObject[];
        /**
          * The row content for the table.
         */
        "data": { [key: string]: any }[];
        /**
          * Set the density of the table including font and padding.
         */
        "density"?: IcDataTableDensityOptions;
        /**
          * Applies a border to the table container.
         */
        "embedded"?: boolean;
        /**
          * Sets the row height on all rows in the table that aren't set using the variableRowHeight method.
         */
        "globalRowHeight"?: IcDataTableRowHeights;
        /**
          * If `true`, column headers will not be visible.
         */
        "hideColumnHeaders"?: boolean;
        /**
          * When set to `true`, the full table will show a loading state, featuring a radial indicator.
         */
        "loading"?: boolean;
        /**
          * Sets the props for the circular loading indicator used in the loading state.
         */
        "loadingOptions"?: {
    appearance?: IcThemeForegroundNoDefault;
    description?: string;
    label?: string;
    labelDuration?: number;
    max?: number;
    min?: number;
    progress?: number;
    showBackground?: boolean;
  };
        /**
          * The minimum amount of time the `loading` state displays for before showing the data. Used to prevent flashing in the component.
         */
        "minimumLoadingDisplayDuration"?: number;
        /**
          * Sets the props for the pagination bar.
         */
        "paginationOptions"?: {
    itemsPerPage?: { label: string; value: string }[];
    type?: IcPaginationTypes;
    control?: IcPaginationControlTypes;
    itemsPerPageControl?: boolean;
    goToPageControl?: boolean;
    alignment?: IcPaginationAlignmentOptions;
  };
        /**
          * Resets the `globalRowHeight` prop to `40px` and sets the `variableRowHeight` prop to `null`.
         */
        "resetRowHeights": () => Promise<void>;
        /**
          * If `true`, adds a pagination bar to the bottom of the table.
         */
        "showPagination"?: boolean;
        /**
          * Sets the order columns will be sorted in and allows for 'default' sorts to be added.
         */
        "sortOptions"?: {
    sortOrders: IcDataTableSortOrderOptions[];
    defaultColumn?: string;
  };
        /**
          * If `true`, allows table columns to be sorted using applied sort buttons.
         */
        "sortable"?: boolean;
        /**
          * If `true`, column headers will remain at the top of the table when scrolling vertically.
         */
        "stickyColumnHeaders"?: boolean;
        /**
          * If `true`, row headers will remain to the left when scrolling horizontally.
         */
        "stickyRowHeaders"?: boolean;
        /**
          * If `true`, the table displays a linear loading indicator below the header row to indicate an updating state.
         */
        "updating"?: boolean;
        /**
          * Sets the props for the linear loading indicator used in the updating state.
         */
        "updatingOptions"?: {
    appearance?: IcThemeForegroundNoDefault;
    description?: string;
    max?: number;
    min?: number;
    progress?: number;
  };
        /**
          * Allows for custom setting of row heights on individual rows based on an individual value from the `data` prop and the row index. If the function returns `null`, that row's height will be set to the `globalRowHeight` property.
         */
        "variableRowHeight"?: (params: {
    [key: string]: any;
    index: number;
  }) => IcDataTableRowHeights | null;
    }
    interface IcPaginationBar {
        /**
          * Sets the alignment of the items in the pagination bar.
         */
        "alignment"?: IcPaginationAlignmentOptions;
        /**
          * Sets the styling for the items in the pagination bar.
         */
        "appearance"?: IcThemeForeground;
        /**
          * The label which will be used in place of 'items' if paginationType is data. Should be capitalised.
         */
        "itemLabel"?: string;
        /**
          * The options which will be displayed for 'items per page' select input. Set a maximum of 4 options including a required 'All' option with value equal to total number of items.
         */
        "itemsPerPageOptions"?: {
    label: string;
    value: string;
  }[];
        /**
          * The label which will be used in place of 'Page' if paginationType is page. Should be capitalised.
         */
        "pageLabel"?: string;
        /**
          * Whether the displayed pagination is simple or complex.
         */
        "paginationControl"?: IcPaginationControlTypes;
        /**
          * Whether total number of items and current item range or total number of pages and current page is displayed.
         */
        "paginationType"?: IcPaginationTypes;
        /**
          * If `true`, the 'go to page' control should be displayed.
         */
        "showGoToPageControl"?: boolean;
        /**
          * If `true`, the number of total items and current item range or number of total pages and current page should be displayed.
         */
        "showItemsPerPage"?: boolean;
        /**
          * If `true`, the select input to control 'items per page' should be displayed.
         */
        "showItemsPerPageControl"?: boolean;
        /**
          * Total number of items to be displayed across all pages.
         */
        "totalItems": number;
    }
    interface IcTitleBar {
        /**
          * The description that is displayed below the `header` and `metadata`. Can be overridden with the `description` slot.
         */
        "description"?: string;
        /**
          * If `true`, will apply a background colour and a bottom border to the title bar.
         */
        "fullWidth"?: boolean;
        /**
          * The header of the title bar. Can be overridden with the `header` slot. If used with an ic-data-table it will default to the table's `caption` unless overridden.
         */
        "header"?: string;
        /**
          * When `true`, the density select will not be rendered.
         */
        "hideDensitySelect"?: boolean;
        /**
          * The metadata displayed next to the `header`.
         */
        "metadata"?: string;
    }
}
export interface IcDataTableCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIcDataTableElement;
}
export interface IcPaginationBarCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIcPaginationBarElement;
}
export interface IcTitleBarCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIcTitleBarElement;
}
declare global {
    interface HTMLIcDataTableElement extends Components.IcDataTable, HTMLStencilElement {
    }
    var HTMLIcDataTableElement: {
        prototype: HTMLIcDataTableElement;
        new (): HTMLIcDataTableElement;
    };
    interface HTMLIcPaginationBarElementEventMap {
        "icPageChange": { value: number };
        "icItemsPerPageChange": { value: number };
    }
    interface HTMLIcPaginationBarElement extends Components.IcPaginationBar, HTMLStencilElement {
        addEventListener<K extends keyof HTMLIcPaginationBarElementEventMap>(type: K, listener: (this: HTMLIcPaginationBarElement, ev: IcPaginationBarCustomEvent<HTMLIcPaginationBarElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLIcPaginationBarElementEventMap>(type: K, listener: (this: HTMLIcPaginationBarElement, ev: IcPaginationBarCustomEvent<HTMLIcPaginationBarElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLIcPaginationBarElement: {
        prototype: HTMLIcPaginationBarElement;
        new (): HTMLIcPaginationBarElement;
    };
    interface HTMLIcTitleBarElement extends Components.IcTitleBar, HTMLStencilElement {
    }
    var HTMLIcTitleBarElement: {
        prototype: HTMLIcTitleBarElement;
        new (): HTMLIcTitleBarElement;
    };
    interface HTMLElementTagNameMap {
        "ic-data-table": HTMLIcDataTableElement;
        "ic-pagination-bar": HTMLIcPaginationBarElement;
        "ic-title-bar": HTMLIcTitleBarElement;
    }
}
declare namespace LocalJSX {
    interface IcDataTable {
        /**
          * The title for the table only visible to screen readers.
         */
        "caption": string;
        /**
          * The column headers for the table.
         */
        "columns": IcDataTableColumnObject[];
        /**
          * The row content for the table.
         */
        "data"?: { [key: string]: any }[];
        /**
          * Set the density of the table including font and padding.
         */
        "density"?: IcDataTableDensityOptions;
        /**
          * Applies a border to the table container.
         */
        "embedded"?: boolean;
        /**
          * Sets the row height on all rows in the table that aren't set using the variableRowHeight method.
         */
        "globalRowHeight"?: IcDataTableRowHeights;
        /**
          * If `true`, column headers will not be visible.
         */
        "hideColumnHeaders"?: boolean;
        /**
          * When set to `true`, the full table will show a loading state, featuring a radial indicator.
         */
        "loading"?: boolean;
        /**
          * Sets the props for the circular loading indicator used in the loading state.
         */
        "loadingOptions"?: {
    appearance?: IcThemeForegroundNoDefault;
    description?: string;
    label?: string;
    labelDuration?: number;
    max?: number;
    min?: number;
    progress?: number;
    showBackground?: boolean;
  };
        /**
          * The minimum amount of time the `loading` state displays for before showing the data. Used to prevent flashing in the component.
         */
        "minimumLoadingDisplayDuration"?: number;
        /**
          * Emitted when the `globalRowHeight` or `variableRowHeight` properties change in the data table.
         */
        "onIcRowHeightChange"?: (event: IcDataTableCustomEvent<void>) => void;
        /**
          * Sets the props for the pagination bar.
         */
        "paginationOptions"?: {
    itemsPerPage?: { label: string; value: string }[];
    type?: IcPaginationTypes;
    control?: IcPaginationControlTypes;
    itemsPerPageControl?: boolean;
    goToPageControl?: boolean;
    alignment?: IcPaginationAlignmentOptions;
  };
        /**
          * If `true`, adds a pagination bar to the bottom of the table.
         */
        "showPagination"?: boolean;
        /**
          * Sets the order columns will be sorted in and allows for 'default' sorts to be added.
         */
        "sortOptions"?: {
    sortOrders: IcDataTableSortOrderOptions[];
    defaultColumn?: string;
  };
        /**
          * If `true`, allows table columns to be sorted using applied sort buttons.
         */
        "sortable"?: boolean;
        /**
          * If `true`, column headers will remain at the top of the table when scrolling vertically.
         */
        "stickyColumnHeaders"?: boolean;
        /**
          * If `true`, row headers will remain to the left when scrolling horizontally.
         */
        "stickyRowHeaders"?: boolean;
        /**
          * If `true`, the table displays a linear loading indicator below the header row to indicate an updating state.
         */
        "updating"?: boolean;
        /**
          * Sets the props for the linear loading indicator used in the updating state.
         */
        "updatingOptions"?: {
    appearance?: IcThemeForegroundNoDefault;
    description?: string;
    max?: number;
    min?: number;
    progress?: number;
  };
        /**
          * Allows for custom setting of row heights on individual rows based on an individual value from the `data` prop and the row index. If the function returns `null`, that row's height will be set to the `globalRowHeight` property.
         */
        "variableRowHeight"?: (params: {
    [key: string]: any;
    index: number;
  }) => IcDataTableRowHeights | null;
    }
    interface IcPaginationBar {
        /**
          * Sets the alignment of the items in the pagination bar.
         */
        "alignment"?: IcPaginationAlignmentOptions;
        /**
          * Sets the styling for the items in the pagination bar.
         */
        "appearance"?: IcThemeForeground;
        /**
          * The label which will be used in place of 'items' if paginationType is data. Should be capitalised.
         */
        "itemLabel"?: string;
        /**
          * The options which will be displayed for 'items per page' select input. Set a maximum of 4 options including a required 'All' option with value equal to total number of items.
         */
        "itemsPerPageOptions"?: {
    label: string;
    value: string;
  }[];
        /**
          * Emitted when the items per page option is changed.
         */
        "onIcItemsPerPageChange"?: (event: IcPaginationBarCustomEvent<{ value: number }>) => void;
        /**
          * Emitted when a page is navigated to via the 'go to' input.
         */
        "onIcPageChange"?: (event: IcPaginationBarCustomEvent<{ value: number }>) => void;
        /**
          * The label which will be used in place of 'Page' if paginationType is page. Should be capitalised.
         */
        "pageLabel"?: string;
        /**
          * Whether the displayed pagination is simple or complex.
         */
        "paginationControl"?: IcPaginationControlTypes;
        /**
          * Whether total number of items and current item range or total number of pages and current page is displayed.
         */
        "paginationType"?: IcPaginationTypes;
        /**
          * If `true`, the 'go to page' control should be displayed.
         */
        "showGoToPageControl"?: boolean;
        /**
          * If `true`, the number of total items and current item range or number of total pages and current page should be displayed.
         */
        "showItemsPerPage"?: boolean;
        /**
          * If `true`, the select input to control 'items per page' should be displayed.
         */
        "showItemsPerPageControl"?: boolean;
        /**
          * Total number of items to be displayed across all pages.
         */
        "totalItems": number;
    }
    interface IcTitleBar {
        /**
          * The description that is displayed below the `header` and `metadata`. Can be overridden with the `description` slot.
         */
        "description"?: string;
        /**
          * If `true`, will apply a background colour and a bottom border to the title bar.
         */
        "fullWidth"?: boolean;
        /**
          * The header of the title bar. Can be overridden with the `header` slot. If used with an ic-data-table it will default to the table's `caption` unless overridden.
         */
        "header"?: string;
        /**
          * When `true`, the density select will not be rendered.
         */
        "hideDensitySelect"?: boolean;
        /**
          * The metadata displayed next to the `header`.
         */
        "metadata"?: string;
        /**
          * Emitted when the table density select value is changed.
         */
        "onIcTableDensityUpdate"?: (event: IcTitleBarCustomEvent<IcDensityUpdateEventDetail>) => void;
    }
    interface IntrinsicElements {
        "ic-data-table": IcDataTable;
        "ic-pagination-bar": IcPaginationBar;
        "ic-title-bar": IcTitleBar;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "ic-data-table": LocalJSX.IcDataTable & JSXBase.HTMLAttributes<HTMLIcDataTableElement>;
            "ic-pagination-bar": LocalJSX.IcPaginationBar & JSXBase.HTMLAttributes<HTMLIcPaginationBarElement>;
            "ic-title-bar": LocalJSX.IcTitleBar & JSXBase.HTMLAttributes<HTMLIcTitleBarElement>;
        }
    }
}
